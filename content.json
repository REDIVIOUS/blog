{"meta":{"title":"REDIVIOUS‘s Blog","subtitle":"世界那么大，我想去看看","description":"Waylon Ding's blog.","author":"Waylon Ding","url":"www.waylonding.cn/blog"},"pages":[{"title":"about","date":"2019-11-19T06:48:40.000Z","updated":"2019-11-19T06:48:40.233Z","comments":true,"path":"about/index.html","permalink":"www.waylonding.cn/blog/about/index.html","excerpt":"","text":""}],"posts":[{"title":"Machine Learning Notes","slug":"machine-learning","date":"2019-12-06T15:54:35.000Z","updated":"2019-12-06T16:08:47.821Z","comments":true,"path":"2019/12/06/machine-learning/","link":"","permalink":"www.waylonding.cn/blog/2019/12/06/machine-learning/","excerpt":"","text":"机器学习笔记参考课程：Cousera (Stanford)：Machine Learning (by Andrew Ng)HUST: Machine Learning主要内容（学校机器学习内容，不包括吴恩达机器学习内容）：机器学习概念、监督学习的各种算法：K临近、维度灾难、感知机、数据估计概率、贝叶斯和朴素贝叶斯、逻辑回归、最大似然、最大后验估计、梯度下降、线性回归、支持向量机、实验风险估计、模型选择、偏差与方差核方法、高斯过程、KD树、决策树、Bagging、Boosting、神经网络与深度学习简介、无监督学习的经典聚类、降维算法。","categories":[{"name":"CS Courses","slug":"CS-Courses","permalink":"www.waylonding.cn/blog/categories/CS-Courses/"}],"tags":[{"name":"AI","slug":"AI","permalink":"www.waylonding.cn/blog/tags/AI/"},{"name":"Machine Learning","slug":"Machine-Learning","permalink":"www.waylonding.cn/blog/tags/Machine-Learning/"}],"keywords":[{"name":"CS Courses","slug":"CS-Courses","permalink":"www.waylonding.cn/blog/categories/CS-Courses/"}]},{"title":"Computing Theory Notes","slug":"Computing-Theory","date":"2019-11-20T06:49:38.000Z","updated":"2019-12-04T07:03:20.367Z","comments":true,"path":"2019/11/20/Computing-Theory/","link":"","permalink":"www.waylonding.cn/blog/2019/11/20/Computing-Theory/","excerpt":"","text":"Notes of Computing Theory 2019Reference: CSC-4890: Introduction to Theory of Computation the website: https://csc.lsu.edu/~busch/courses/theorycomp/ Introduction to the Theory of Computation (3rd edition) An Introduction to Formal Languages and Automata (5th thedition) Computational Complexity: a Modern Approach Part1 Formal Language and Automata1.1 Basis1.1.1 Introduction1.1.2 Languages1.1.3 DFA1.1.4 NFA1.2 Regular_Expression1.2.1 Regular_Expressions1.2.2 Regular_Properties1.2.3 Regular_Grammars1.2.4 Regular_Pumping1.2.5 Regular_Pumping_Examples1.3 Context_Free1.3.1 Context-Free Languages 主要形式：S-&gt;ab|SS|e 推导表：对于一个语法，和确定的答案，可以每次替换最左的变量、或者每次替换最右的变量 推导树（解析树）：对于每一个推导都能给出一个derivation tree。 歧义性：leftmost和rightmost推导出来的结果不一样（有两个不同的derivation tree或者有两个不同的左文法）例如E-&gt;E+E|EE|(E)|a对于a+aa，有两个不同路径的派生 要将歧义的转换为非歧义的，或许能够成功，但也有失败的。 有的语言是固有的歧义的。（PPT在此时隐含告诉了你如何用language构造grammar） 注意PPT上举出的例子：{a^n b^n c^n}不是一个context-free的语言1.3.2 Properties of Context-Free languages context-free的关键点是：language-L、grammars-G、variables-S union操作：s-&gt;s1|s2 concatention操作：s-&gt;s1s2 star operation操作：s1-&gt;ss1|r intersection、complement不一定是context-free intersection L1={a^n b^n c^m} context free S-&gt;AC; A-&gt;aAb|r; C-&gt;cC|r。 L2={a^n b^m c^m} S-&gt;AB; A-&gt;aA|r; B-&gt;bBc|r。 其交集为{a^n b^n c^n} 不是context free complementation ^(^(L1)+^(L2))=L1交集L2={a^n b^n c^n}。不是conetxt free L1 context free; L2 regular; -&gt; L1交集L2 = context free（正则闭包） 正则闭包：L1是上下文无关文法，L2是正则文法，则L1交集L2是上下文无关文法。 构造下推自动机：L1交集L2 例子：证明L={a^n b^n n!=100}是context free（见PPT）构造除了n=100之外的，取交集。 例子：证明L={w:na=nb=nc}不是context-free。假设是，并和{abc*}相交，得到{a^n b^n c^n}，不是context-free。1.3.3 Simplifications of Context-Free Grammars 替换原则：形如A-&gt;xBz，B-&gt;y1；可以替换为：A-&gt;xBz|xy1z nullable variables: M-&gt;e unit productions: A-&gt;B. (X-&gt;X can be removed) useless prodections: never terminate (A-&gt;aA); not reachable from S (详见PPT) context-free的正规表达 (chomsky normal form) 都有形式：A-&gt;BC或者A-&gt;a (variable只能有两个，terminal只能有一个)) 转换成chomsky form 对每个terminal转换：Ta-&gt;A 用V合并两个varible Greinbach normal form A -&gt; aV1V2V3…（只有一个terminal，后面全是varible）1.3.5 parsing lexical analyzer：识别关键词和变量 parser：知道程序的编程语言、对于输入的程序建立推导树、将推导树转换成机器码。 exhaustive parser：K^2w S-grammar/cyk: A-&gt;av (v=&gt;string of variables) :O(w^2 * w) = O(w^3) (number of substrings * number of pre-suffix decompositions for a string) (和算法课上讲的context-free的表求解过程一致) 1.3.6 Context_Free_Pumping 我们有最多t个right-bond-size，r个变量 =&gt; 证明了至少有r+2层；根据鸽巢定理，一定会有重复使用的变量。 PPT P45展示了context-free的pumping lemma。关键点：w=uvxyz；有u v^i x y^i z也属于这个文法。（vxy&lt;=p;vy&gt;=1） 证明要点：分情况vxy位置，对于{a^n b^n c^n}来说有5种情况。vy&gt;=1，有k1+k2&gt;=1。1.3.7 Context_Free_Pumping_Examples L={vv:v belongs to {a,b}} not context-free (10种) L={a^(n!):n&gt;=0} not context-free L={a^(n^2) b^n: n&gt;=0} not context-free1.4 PDA1.4.1 PDA a, b-&gt;c (input, pop, push) NPDA: 有不确定状态的下推自动机：如e状态如果一个string被接受了，代表所有的输入被消耗了，最后一个状态是接受状态。 push &amp; pop strings：a, w1-&gt;w2 (inout,pop strings push strings) (注意，在构造PDA的时候，需要知道pop和push中间需要加上一个介稳态) instantaneous descripition：(q,u,s):(现有状态，剩余输入、现有在栈中的输入) 我们有：前一个时间的instantaneous descripition &gt; 后一个时间的instantaneous descripition。1.4.2 PDA_Accept_Context_Free 一个context-free language 和一个能被PDA接受的语言是等价的。证明过程：1.证明conetxt-free语言的语法被PDA的语法包含。（能将context-free文法转换为PDA；2.证明context-free语言（文法）包含PDA（能将任意的PDA转换为context-free文法） context-free转换为PDA q0-&gt;q1-&gt;q2 (q1:loop) grammar：A-&gt;w: e,A-&gt;w terminal：a,a-&gt;e PDA -&gt; context-free 转换到：PDA只有一个接受状态，利用e，e-&gt;e 使用initial stack symbol#增加e,e-&gt;@; e,e-&gt;Z；对于PDA来说，还是z为初始状态 使用唯一的接受stack symbol#增加e,e-&gt;e; 然后空栈操作（添加e,x-&gt;e）x为除了@和#之外的所有的元素; 最后加操作e,@-&gt;e。 每次转换状态要么将一个symbol入栈，要么将一个symbol出栈，但不能两者同时。举个例子：就是不能有k,a-&gt;b；需要转换为k,a-&gt;e; e,e-&gt;b;特殊情况：如果有k,e-&gt;e；需要转换为k,e-&gt;u；e,u-&gt;e; 转换到这里完成，需要注意的是，新的栈开始符号#没有在任何的传递中使用。 语法的构建：变量：Aqi，qj （qi、qj为PDA的状态） Initial state：q0；Accept state：qf start varible：Aq0qf kind1:from single state：Aq0q0-&gt;e（对于Aqiqi都成立） kind2:from triplets of states$A_{q0q5} -&gt; A_{q0q0}A_{q0q5}|A_{q0q1}A_{q1q5}|A_{q0q2}A_{q2q5}|A_{q0q3}A_{q3q5}|A_{q0q4}A_{q4q5}|A_{q0q5}A_{q5q5}$ from pairs of transitions缩减状态，详见PPT。 证明Apq，有一个从状态p到状态q的串w，使得这个串变成空串：(p,w,e)&gt;(q,e,e),有以下几种情况 Apq-&gt;AprArq-&gt;…-&gt;w Apq-&gt;aArsb-&gt;…-&gt;w 用数学归纳法证明，详见ppt（这一点我期末考试再复习一遍，这里先立个flag） 1.4.3 DPDA 确定性的下推自动机。不允许不确定性的情况存在。例如同时存在a,b-&gt;w1和a,b-&gt;w2。也不允许r,b-&gt;w1和a,b-&gt;w2同时存在。 如果有一个DPDA构造的语言L，证明这个语言是确定性上下文法无关语言。 DPFA属于PFA的一部分（真包含关系）。PPT中展示了一个context-free language它不能被任何DPDA接受：L(M)={a^n b^n}+{a^n b^2n} ：构造一条路径，构造一个PDA有形式L+{a^n b^n c^n}。而这个形式本来不属于context-free语言，推出矛盾。 part2 Turing machine2.1 turing machines 最大范围的语言，包括{a^n b^n c^n}、ww a-&gt;b,L (read a, write b, move left) 图灵机是确定性的，不允许e传递。P16 停止条件：无法根据语法去跟随步骤。接受状态也不允许有走出状态 一般表达：g(q1,a)=(q2,b,R)串的表达eg: q2xayb&gt;xq0ayb（即状态左边的、状态、状态所指、状态右边的） initial configuration：q0w 且有：L(M)={w: q0w &gt; x1qfx2} (q0: initial, qf: accept) 2.2 turing variations2.2.1 Turing thesis 解决问题的算法是构造一个图灵机解决问题 算法描述图灵机的步骤 图灵机 -&gt; 计算步骤2.2.2 variations of the turing machine 标准模型：PPT第六面 （本章证明以下变种都和标准图灵机相等） Stay Option: L,R,S: left, right, stay PPT：P13 Prove：PPT P15 （能互相simulate） stay option 和 standrad 的转换 P18 multiple track tape: (b,a)-&gt;(c,d),L PPT: P21 semi-infinite: 在输入串的左端加入#。 PPT: P23 将infinite分成left part和right part (b,f)-&gt;(g,d),L,R 左边往左边流，右边往右边流 porve: 标准-&gt;半带 P25 prove: 半带-&gt;标准 P27 multi-tape machine：(b,f)-&gt;(g,d),L,R P34 prove: 多带-&gt;标准 P38 多维图灵机：L,R,U,D P42 二维模型：P46 不确定性图灵机 多个choice 确定性模拟非确定性P55（BFS）2.2.3 universal turing machine","categories":[{"name":"CS Courses","slug":"CS-Courses","permalink":"www.waylonding.cn/blog/categories/CS-Courses/"}],"tags":[{"name":"Formal language and Automata","slug":"Formal-language-and-Automata","permalink":"www.waylonding.cn/blog/tags/Formal-language-and-Automata/"}],"keywords":[{"name":"CS Courses","slug":"CS-Courses","permalink":"www.waylonding.cn/blog/categories/CS-Courses/"}]},{"title":"OpeartingSystem Notes","slug":"OpeartingSystem-Notes","date":"2019-11-19T08:29:13.000Z","updated":"2019-12-02T09:01:29.735Z","comments":true,"path":"2019/11/19/OpeartingSystem-Notes/","link":"","permalink":"www.waylonding.cn/blog/2019/11/19/OpeartingSystem-Notes/","excerpt":"","text":"计算机操作系统学习&amp;复习笔记参考书目：计算机操作系统（人民邮电出版社） 第一章 绪论1.1 操作系统在计算机中的地位 * 操作系统是什么； 是核心软件 负责软件硬件资源分配与调用 控制、协调并发活动 提供用户接口、为用户良好工作环境 操作系统特点位置：从里到往外裸机-&gt;操作系统-&gt;应用软件 内容庞杂、涉及面广 控制管理硬件、软件；控制程序进行 为用户提供良好接口 实践性强 技术发展快Unix和linux采取优先调度。linux调度方法：140队列，140位位图，扫描位图（不怎么需要时间），高优先级入列 OS和各层次的关系 硬件：控制CPU、访问存储、驱动设备、中断 软件：控制管理、提供界面和服务 各层次对OS的影响 硬件约束：用串行（CPU）实现并行（操作系统） 上层用户需求：实时和分时，界面友好1.2 操作系统的形成和发展（多道程序、分时技术）1.3 操作系统的基本概念（定义、特性、资源管理的功能、应该解决的基本功能）1.4 操作系统的基本类型 批量操作系统 分时操作系统 实时操作系统 个人计算机操作系统 网络操作系统 分布式系统1.5 操作系统采用的技术 * 并行处理技术 并行处理：多个部件、为整体任务同时执行。 多用户、多任务同时执行。为描述任务，引入进程的概念。进程的状态及控制（任务状态）、进程同步与互斥（多任务协调）、进程调度（CPU控制权的分配等等） 系统资源共享处理机共享（处理机分配调度）、存储器共享（存储分配、保护、虚拟存储与地址映射）、设备共享（设备分配驱动以及中断）、信息共享（文件结构、共享以及存取方法） 虚拟技术 用户：逻辑视图。操作系统：物理视图。 物理（硬件）资源（系统）：CPU、主存、打印机、磁盘等。 逻辑（软件）资源（用户）：CPU1、CPU2（CPU分时）；虚拟主存1、虚拟主存2（主存的主存管理）；打印机1、打印机2（虚拟打印技术）（网络上有很多资源需要打印机） 第二章 操作系统的结构和硬件支持2.1 操作系统虚拟机2.2 操作系统组织结构 操作系统的结构 运行时的组织结构 操作系统与计算机层次的接口2.3 处理机的态 * 系统中两类程序：管理程序和用户程序： 管理程序：管理系统资源、控制程序运行 用户程序: 使用资源、提出申请；被控制 区分处理机状态的目的是为了保护操作系统。不保护就有可能瘫痪。 处理机的态：中央处理机的工作状态（取决于当前处理机运行的程序） 管态：管理程序执行的态。称特权级。使用全部指令和资源。 有的细分为核心态和管态 用户态：用户程序执行的态。只允许访问自己的存储区域，禁止特权指令，不能直接取用资源与改变机器的态。 管态和用户态区别： 管态 操作系统程序执行 使用全部指令 使用全部系统资源（包括整个存储空间） 用户态 用户程序执行 禁用特权指令 只允许用户程序访问自己的存储区域 特权指令集 涉及到外部设备的输入/输出命令 修改特殊寄存器的指令 改变机器状态的指令 实现处理机分态的硬件支持 在状态寄存器中设置状态位： 一位：用户态、管态 两位：核态、管态、用户态 核态和管态都是操作系统程序执行时处理机的状态。核态：操作系统核心程序执行时的状态，权限比管态高，可以执行所有机器指令（改变机器状态）。 Unix（linux）系统中状态的分类 00-核态；01-管态；11-用户态 80x86微处理器中状态位：（CPU特权级）DPL=0（核态）；DPL=3（用户态） 程序性中断 程序有越权操作时候发生的中断称为程序性中断。 中断机制负责使其陷入操作系统，用户态转换为管态，操作系统管理程序获得控制权开始执行。 什么时候中断用户态下超出了权限时保护操作系统： 当用户执行了一条特权指令 当用户程序试图访问操作系统数据区或其他程序占用的区域时。2.4 中断及其处理 * 中断：某个事件（掉电、定点加法溢出，I/O结束）发生时，停止现行程序执行，转而处理该事件的程序对事件进行处理，处理完毕返回执行原来程序。 中断类型： I/O中断 外中断：时钟、操作员控制台中断、通信中断 机器故障中断：电源、主存取指错等。 程序性中断：定点溢出、用户态下使用核态指令、非法操作 访管中断：对操作系统提出某种需求的时所发出的中断。 中断方式： 强迫性中断：除了访管中断 自愿中断：访管中断 中断来源 中断：由处理机外部事件引起的中断：时钟、磁盘、终端 俘获：由处理机内部事件引起的中断：非法指令、地址越界、浮点溢出、trap指令 中断响应及硬件支持： 保护现场、恢复现场 现场： 后继指令所在主存的单元号、程序运行所处的状态、指令执行情况、程序执行的中间结果 保护现场：现场存入主存。 恢复现场：把保护的现场重新送到各个特殊寄存器 中断响应：中央处理器发出请求-&gt;中止现有程序执行-&gt;引出中断处理程序的过程 系统堆栈：存入指令计数器(PC)、处理机状态寄存器(PS) 的内容 (一般先PS后PC？)（硬件层面） 中断向量表：存入中断程序地址（地址内存从0开始） 中断响应实质：交换指令地址及处理机的状态信息 软件的中断处理过程 中断进入 step1 保护中断程序的现场（没有保存的寄存器） step2 进入相应的中断服务例程。 step3 恢复中断程序的现场。 第三章 操作系统的用户接口3.1 用户工作环境 操作系统提供的环境 操作系统的生成和系统初启 应用程序的处理3.2 操作系统的用户接口及分类 用户接口/用户界面：用户控制计算机的手段 操作接口/命令界面：键盘命令（分时操作系统）（MS-DOS、unix/linux）、图形界面（windows）、作业控制语言（批处理系统）组织工作流程，控制程序运行（C语言编写编译链接等） 程序接口：系统功能调用程序运行时，使用系统功能调用来请求操作系统的服务。3.3 系统功能调用及其实现技术 硬件支持：由用户态到管态 访管指令/自愿进管指令：svc n（功能号） 访管中断：正在运行的程序对于操作系统的某种需求。 系统功能调用：借助访管指令，取值n（特定功能），硬件进入，软件方法完成。 系统调用实现用户程序（svc i）、访管中断处理程序（按照i转移）、例行子程序入口地址表、例行自程序3.5 linux系统调用功能的实现 linux系统功能调用的进入 异常处理（系统调用通过异常类型实现）、软中断（int 0x80）、状态转换（从用户态到核心态，执行自陷处理程序（防管中断处理程序）） getuid系统调用过程 用户程序(getuid())-&gt;标准C库(内含int0x80)-&gt;系统调用处理程序-&gt;内核例程（系统服务例程） linux系统调用的进入和返回 软中断（自陷指令/访管指令）int 0x80 发生中断（自陷/访管中断） 处理机用户态-&gt;内核态（内核状态的改变） system_call()开始执行系统调用处理程序（系统功能调用的执行） 处理完毕后，iret返回到用户态 Linux系统功能调用的实现机制 硬件支持： 增加一个软中断指令、自陷 软件：系统调用号、系统调用表、系统服务例程、系统调用处理程序 增加一个新的系统调用 增加一个新的系统服务例程 增加一个新的系统调用号 在系统调用表中增加一项（新例程的地址） 将新的系统服务例程加入到系统中（系统重构） 系统调用号 linux中每个系统调用被赋予一个唯一的系统调用号格式：#define _NR_fork 2 系统调用表：记录了内核中所有已经注册过的系统调用、系统调用的函数指针（函数指针数组）（保存所有系统调用的函数指针） 系统调用的处理过程 宏SAVE_ALL保护现场 正确性检查 eax中包含系统调用号，调用对应的服务例程 服务流程结束时，RESTORE_ALL恢复寄存器 iret返回 第四章 进程及进程管理4.1 并发进程及其特点 程序的顺序执行：一个程序的一次执行过程称为一个计算，一个计算的若干操作必须按照严格的先后顺序来执行。 顺序性：按照严格顺序执行 封闭性：一旦开始执行，不受外界因素影响 可再现性：执行的结果与他的执行速度无关（时间无关），与初始条件有关。 并发程序 定义：若干个程序同时在系统中运行，程序在时间上时重叠的（一个没做完，另外一个已经开始） 并行语句记号cobegin S1，S2，S3…coend 并发程序的特点 失去了封闭性和可再现性一个程序的执行可以改变另一个程序的变量，后者的输出依赖于各程序执行的相对速度，失去了程序的封闭性的特点。 解决进程的同步问题（与时间有关的错误） 程序与计算不再一一对应：一个程序对应多个计算 程序并发执行的相互制约：间接的相互制约：资源共享、直接的相互制约：公共变量 4.2.1 进程定义 运行（获得cpu）-&gt;暂停（保留状态）-&gt;运行（获得cpu） 定义：在给定的活动空间和初始环境下，在一个处理机上的执行过程。 与程序的区别 程序静态（C语言代码不变）、进程动态（一次执行过程） 进程是一个独立运行的活动单位 竞争系统资源的基本单位（cpu，I/O） 一个程序可以对应多个进程，一个进程至少包含一个程序。4.2.2 进程状态及其变迁 进程的基本状态 运行状态（占用cpu）：已经获得运行所必须的资源，程序正在处理机上执行 （单cpu运行状态只能有一个） 等待状态（输入输出）：程序等待某一事件等待发生（等待外部传输完成等等）而暂时停止执行（这时即使给它cpu的控制权也无法执行） 就绪状态：进程已经获得除了CPU之外的运行所必须的资源，一旦获得了CPU控制权，就可以立即运行。 进程状态的变迁：（基本状态变迁只有前三个） 运行-&gt;等待：服务请求（I/O） 等待-&gt;就绪：（I/O是完成）服务完成，事件来到 就绪-&gt;运行：进程调度（CPU空出） 等待-&gt;运行：不可能 运行-&gt;就绪：时间片到了（分时系统中） 就绪-&gt;等待：有需求的系统提供（一般没有） linux系统状态变迁 新进程-&gt;就绪：创建 就绪-&gt;运行：进程调度 运行-&gt;就绪：被抢占 等待-&gt;就绪：等待的事情发生 运行-&gt;等待：等待某事件 运行-&gt;终止：进程完成 进程状态变迁的驱动及条件见作业习题4.2.3 进程控制块及进程队列 进程控制块：描述：1、进程与其他进程；2、系统资源的关系；以及3、进程在各个不同时期所处状态；的数据结构。称为进程控制块PCB。 程序与数据：描述进程“本身”所应该完成的功能 PCB：进程的动态特征，该进程与“其他进程”和“系统资源”的关系。 进程控制块（内容）： 进程标识符：进程符号或者内部id号 进程当前状态：本进程目前处于何种状态。 当前队列指针：登记了处于同一状态的“下一个进程的PCB地址”。 进程优先级：进程提要求CPU的紧迫程度。 通信信息：进程间通信记录的有关信息。 家族联系：本进程和家族的联系（子进程、父进程等等） 进程控制块的组织————进程队列结构 就绪状态队列：ready_q_start —— 一个或者（最多140个） 等待打印机队列：wait_lpt_q_start —— 多个（等待打印机、磁盘、键盘等） 运行指针：running ——一个 进程控制块的作用： 修改PCB表项 系统通过修改PCB表项的内容，‘动态记录’该进程‘当前的状态’和‘占有资源’的情况，以便实施有效的管理。 在进程队列中移动PCB结构 进程控制和进程调度的功能实现，是在相应的进程队列中移动相关的PCB结构。 4.3 进程控制 进程状态的变化 无 -（创建）- 有 -（撤销）- 消亡 运行 -（等待）- 等待 就绪 -（唤醒）- 等待 创建原语、撤销原语、等待原语、唤醒原语 （原语：原子操作（系统功能调用）） 进程创建 进程创建原语——create（fork） 进程创建原语的功能：创建一个具有指定标识符的过程，建立进程的PCB结构 进程创建原语的实现：PCB池 进程创建原语——create（fork） 申请一个空的PCB结构 无空位报错，有则将入口信息填入PCB的对应项。 将PCB入就绪队列。 返回进程pid（PCB池中的位置）。 进程撤销——kill/exit（退出自己）（一个，一组，自己） 运行指针获得当前进程的pid 释放本进程所占用的资源给父进程 释放PCB结构 转进程调度 进程等待原语——susp 保护CPU现场到PCB结构中 置该进程为“等待”状态 将其PCB结构插入到相应等待队列 转进程调度 进程唤醒原语——wakeup 找到该等待队列 将该结构移出等待队列 将该进程置为就绪状态，PCB插入就绪队列 返回刚刚被打断的进程 进程控制功能及其在进程队列上的操作4.4.2 进程互斥的概念 临界资源：系统中有多个进程，共享各种资源，然而有些资源一次只能为一个进程所用。 系统资源打印机，A、B共享一台打印机。若任意使用，两进程的输出结果交织在一起。解决方法：A使用之前先提出申请，然后独占，B只有在A释放之后系统才能分给B。 进程共享公共变量。 临界区： 互斥：操作系统中。某一进程正在访问某一存储区域时，就不允许其他进程“读出来”或者“修改”该存储区的内容。4.4.3 进程同步的概念 并发进程在一些关键点上可能需要相互等待与互通消息，这种相互制约的等待与互通消息称为进程同步 共享缓冲区的计算进程与打印进程的同步 计算进程cp和打印进程iop公用一个单缓冲 计算的速度快，输出的速度慢。丢失信息 计算的速度慢，输出的速度快。重复打印4.5 同步机构4.5.1 锁、上锁、开锁 每一个共享的临界资源：一个锁单位：0可用，1不可用。 上锁操作： 检测锁位的值（0or1） 若0变为1（占用） 若1（占用），返回第一步 开锁操作：使用完之后，锁位变为0。 上锁原语：保护cpu、当前进程变为等待，插入w的等待队列，转进程调度、w=1 开锁原语：移除等待队列的首元素，插入到就绪队列、该进程就绪、w=0上锁原语-&gt;临界区-&gt;开锁原语4.5.2 信号等的PV操作 2元组：(s.q)。 s&gt;0,表示有可用资源，进程执行，绿灯。 s&lt;=0，表示没有可用资源，停止执行，红灯。 P操作：P(s)；s减1（大于等于0返回，小于0（进程被阻）入信号灯等待队列，置为“等待状态”，转进程调度） V操作：V(s)：S加一。大于0返回，小于等于0唤醒（从信号灯的等待队列中取出首元素、入就绪队列、置“就绪状态”、返回）4.6 进程互斥与同步的实现4.6.1 用上锁原语和开锁原语实现进程互斥上锁原语-&gt;进入临界区cs-&gt;开锁原语 （main函数中设置w=1）4.6.2 用信号灯的P、V操作实现互斥 mutex:互斥信号灯 p(mutex)-&gt;临界区cs-&gt;v(mutex) 若有两个并发进程 mutex=1:没有程序进入临界区 mutex=0:有一个程序进入临界区 mutex=-1:一个程序进入临界区，另一个程序等待进入 若有n个并发进程，则可能有1,0,-1,…,-(n-1)取值 信号灯s为正值：挂起进程前还可以使用的P操作数，等于s还可以使用的物理资源数。 s为负值：在信号灯s队列中等待的进程个数。 P操作：请求一个资源/挂起进程，V操作：释放一个资源/唤醒进程。化验单-&gt;化验进程-》开始工作化验进程-》化验结果-》看病进程-》医疗方案。4.6.3 进程同步的实现 合作进程的执行次序 共享缓冲区的合作进程的同步的解法 考虑4.4.3节中提到的问题 sa表示缓冲区中是否有可供打印的计算结果，初值为0。 sb表示缓冲区有无空位置存放新的信息，其初值为1。 4.6.4 生产者和消费者 计算进程和打印进程 多个计算进程cp不断产生数据，生产者 多个打印进程iop不断打印数据，消费者 有多个缓冲区 通信问题 发消息进程send不断产生消息，生产者 受消息recieve不断接收消息，消费者 生产者和消费者的同步关系 生产者：有界缓冲区无空位，等待；放入物品，发消息 消费者：无物品，等待；取物品，发消息 信号灯的设置 两个同步信号灯 sb：缓冲区的数目，初值=n sa：信息数目，初值=0 一个互斥信号灯 mutex：有界缓冲区是否被占用，初值=1。 4.7 进程通信(IPC) 概念：进程之间直接以较高的效率传递较多数据的信息交互方式。也是两个不同的进程共享数据的方式。 实现：消息缓冲器、发送操作、接收操作 发送进程和接受进程的同步：发送等待、接受等待。4.7.2 进程通信的方式 消息缓冲通信 信息头：发送进程的标识符、接受进程的标识符、传送信息的字节数。 消息缓冲、发送原语、接受原语：每一次想要发送消息，形成一个消息缓冲区，消息原语将消息发出；接受进程在本进程主存空间形成一个接受区，接受原语接受消息。 信箱通信 定义信箱结构 消息发送模块、功能接受模块：提供发送原语和接受原语 所使用的信箱可以用于用户空间中（接受进程地址空间的一部分）、也可以用于操作系统空间中。 下面两个？？ sys V进程通信方式 信号量 共享内存 消息队列 posix进程间通信方式 共享内存 信号量4.8 线程的概念及特点 概念：比进程更小的活动单位，进程中的一个执行路径。 描述：进程中的一条执行路径、有自己私用的运行栈和处理机执行环境、与其他线程“共享”分配给进程的“内存和文件”、单个进程是创建的多个同时存在的线程中的一个。线程是一个动态概念。 线程调用实例4.9 操作系统的并发机制实例 创建进程及应用实例 创建线程及应用实例 等待进程、线程的终止及应用 信号量与使用方法 共享内存及应用实例4.10 进程调度 调度/分派结构：多个就绪状态的进程对处理机的竞争是由进程调度程序来协调的。 调度：就绪状态的进程排序。将一个进程插入到就绪队列，按照一定策略排序。 分派：调度时机，就绪队列第一个进程移出，建立其在处理机上执行环境，在处理机执行。 调度的功能 记录进程的状态变化 决定调度策略：1.优先调度、2.FIFO 实施处理机的分配和回收 调度时机 运行-》等待（阻塞） 运行-》就绪（时间片到） 等待-》就绪（唤醒） 任务完成，终止 异常出错 可剥夺调度，出现更高优先级的就绪进程。 调度方式：“重要而紧迫”的进程怎么处理 剥夺方式：暂停current，处理机给“重要而紧迫” 非剥夺方式：继续current，直到该进程完成或发生某事件到“完成”、“阻塞”，才给“重要而紧迫” 调度算法 进程优先数调度算法 优先数的分类和确定 静态优先数：根据所需资源来计算、基于程序运行时间估计、基于进程类型。 动态优先数：CPU超过一定时间降低、I/O增加，等待时间超过一定时间增加。 循环轮转调度算法 时间片的计算：q=t/n （t为用户能接受的响应时间，n为进入系统的进程数目） 时间片的选取：太小，系统切换很频繁（切换时间不可忽略），从系统角度来看，时间片取大比较好。太大，轮转一次的总时间增大，对进程的响应速度放慢了。 可变时间片轮转调度：根据系统当前的进程树来确定时间片的大小。 多级时间片循环调度 多个就绪队列 先进入高优先级队列，高优先级队列的时间片较小。 用完后，进入下一级队列，优先级降低，但时间片增大一倍。 这个算法，较小时间片处理完较短进程，避免较长进程被频繁中断。 时间片与优先级混合调度算法 I/O后进入因I/O而等待队列，完成后进入高优先就绪。 运行时间片到了，进入低优先就绪队列。 CPU空闲时，若高优先就绪队列非空，则从高优先就绪队列中选择一个进程运行，分配时间片100ms。 CPU空闲时，若高优先就绪队列为空，则从低优先就绪队列中选择一个程序运行，分配时间片为500ms。 照顾I/O量大的进程，适当照顾计算量大的进程，提高系统资源利用率。 第五章 资源分配与调度5.1 资源管理概述 资源管理的目的和任务 虚拟资源5.2 资源管理的机制和策略 资源分配机制 资源分配策略5.3 死锁 定义与示例 原因和必要条件 系统模型和死锁的处理 第六章 主存管理6.1 主存管理概述 主存分片共享 程序的逻辑组织（一维地址和二维地址）6.2 主存管理功能 虚拟存储器 地址映射 主存分配 存储保护6.3 分区存储管理 动态分区存储管理技术 分区分配机构/ 分区分配与安置策略（安置策略的算法首次适应、最佳适应、最坏适应） 碎片问题及拼接技术/6.4 页式存储管理 页式系统应解决的问题 页式系统的地址映射 请调策略 放置策略 淘汰策略 页式地址变换 请调页面的机制 淘汰机制与策略 几种置换算法（OPT、FIFO、LRU、）6.5 段式及段页式存储管理 段式地址结构 段式地址变换 扩充段表功能 段页式存储管理 第七章 设备管理（I/O管理）7.1 设备管理概述 设备管理的功能 设备的独立性 设备控制块7.2 缓冲技术 缓冲概述 常用的缓冲技术 UNIX系统的缓冲区管理7.3 设备分配（为计算机所有的用户程序、活动的进程分配它们所需的外部设备） 设备分配概述 独享分配 共享分配 虚拟分配7.4 输入/输出控制（软件控制硬件：端口、总线、控制器） 输入/输出硬件 输入/输出控制方式 输入/输出子系统 输入/输出控制的例子（以设备处理进程方式为例讨论I/O的控制过程） 第八章 文件系统8.1 文件系统概述 文件 文件系统 文件的组织8.2 文件的逻辑结构和存取方法 文件的逻辑结构 文件的存取方法8.3 文件的物理结构 连续文件 串联文件 索引文件 文件物理结构比较（连续、串联、索引）8.4 文件存储空间的管理 空闲文件目录 空闲块链 位示图 分配策略8.5 文件目录 文件目录及其内容 一级文件目录及缺点 多级文件目录8.6 共享与安全 文件共享与安全性的关系 存取权限的类型及其验证 用文件路径名加快文件的查找8.7 文件操作与文件备份 文件操作 文件备份8。8 UNIX文件系统的主要结构及实现 UNIX文件系统的特点 UNIX系统的索引文件结构 UNIX系统文件目录结构 UNIX系统的打开文件机构 文件存储器空闲块的管理 UNIX文件系统调用","categories":[{"name":"CS Courses","slug":"CS-Courses","permalink":"www.waylonding.cn/blog/categories/CS-Courses/"}],"tags":[{"name":"Operating System","slug":"Operating-System","permalink":"www.waylonding.cn/blog/tags/Operating-System/"},{"name":"System & Network","slug":"System-Network","permalink":"www.waylonding.cn/blog/tags/System-Network/"}],"keywords":[{"name":"CS Courses","slug":"CS-Courses","permalink":"www.waylonding.cn/blog/categories/CS-Courses/"}]},{"title":"ComputerNetwork Notes","slug":"ComputerNetwork-Review-Notes","date":"2019-11-19T08:13:01.000Z","updated":"2019-12-07T03:47:16.060Z","comments":true,"path":"2019/11/19/ComputerNetwork-Review-Notes/","link":"","permalink":"www.waylonding.cn/blog/2019/11/19/ComputerNetwork-Review-Notes/","excerpt":"","text":"计算机网络-自顶向下 学习笔记 &amp; 计算机通信与网络课程复习参考书目：计算机网络-自顶向下方法（原书第7版） 第1章 计算机网络和因特网1.1 什么是因特网 定义：互联、自治（无主从关系）的计算机集合 全球最大的互联网络：ISP网络互联的“网络之网络” 计算机设备集合：主机=端系统（运行各种网络运用） 通信链路：光纤、铜缆、无线电等等；传输速率=带宽 分组交换：转发分组（数据包）：路由器和交换机 端系统接入Internet靠服务提供商ISP，协议控制因特网中的信息接收和发送 因特网标准：RFC、IETF 因特网的服务视角 为网络应用提供通讯服务的通信基础设施：Web、VoIP、email等 为网络应用提供应用编程接口（API）：支持应用程序连接网络，提供类似邮政系统的数据传输服务1.2 网络边缘 网络结构的深入研究 网络边缘：主机、位于数据中心的服务器 网络核心：路由器、网络的网络 接入网、物理媒体：通信链路（有线或者无线的通信链路） 主机（端系统）：位于网络边缘、运行网络程序 通信模型：C/S模型和P2P （客户机和服务器） C/S：Web应用、文件传输FTP请求 P2P：QQ、Skype、BT 接入网络 将网络边缘接入网络核心（端系统连接到边缘路由器） 边缘路由器：端系统到任何其他远程系统路径上的第一台路由器 接入方式： 家庭：Modem拨号/ADSL拨号/HFC/FTTH/卫星 Modem拨号：无法在上网同时拨打电话 DSL（数字用户线）：下行/上行速率最高可达55Mbps/15Mbps、频分复用、带宽独享 HFC（光纤同轴电缆混合网络）：下行/上行速率最高可达40mbps/30mbps、带宽共享 机构（企业）：以太网/WIFI 以太网：通过共享或者专用的链路来连接端系统和路由器。（10Mbps、100Mbps、1000Mbps、10Gbps）的以太网 广域无线接入：3g/LTE 无线接入：共享的无线接入网络连接端系统和路由器（通过基站接入（无线接入点）） 无线局域网：建筑物内、802.11 广域无线接入：由电信运营商提供；3g、4g、5g；802.16 物理媒体分类 导引型媒体（信号沿着固体媒体被导引）、非导引型媒体（信号自由传播） 导引型媒体 双绞线：两根互相绝缘的铜导线：（3类线：传统电话线，10mbps以太网）（5类线：100mbps以太网）（6类线：1Gbps以太网） 同轴电缆：双向传输、基带、宽带 光缆：玻璃光纤传播脉冲，高速运行，低误码率（中继器隔很远，不受电磁干扰） 非导引型媒体：无线电 电磁频谱传播信号、没有物理线路、双向传输 传播环境影响：反射、被障碍物所隔、干扰 无线链路类型：地面微波、无线局域网、无线广域网、卫星 1.3 网络核心 基本问题：数据如何通过网络传输 关键功能：路由（确定从源到目的）+转发（将分组从路由器的输入端口交换至正确的输出端口） 电路交换 过程：建立连接、交换数据（通信）、释放连接 特点：独占资源、确定链路、实时传输不会延迟 多路复用（共享信道） 方法：频分多路复用——FDM、时分多路复用——TDM、波分多路复用——WDM、码分多路复用——CDM CDM（码分多路复用）：广泛用于无线链路共享 每个用户分配一个唯一的m bit的码片序列（0用-1表示，1用+1表示） 编码=(码片序列*数据序列)_求和 解码=码片序列*编码信号/m 要点：接收哪个用户的数据，用哪个数据的码片序列。 存在的问题：网络有突发性、间歇性，不合适；不够灵活； 报文交换：源/应用发送整体信息（例如一个文件）给目的主机 分组交换（存储、转发） 报文分拆出来的一些列相对较小的数据包 分组交换需要报文的拆分和重组，需要额外开销（加头） 分组传输时间延迟：delay=L/R T=M/R+nL/R 分组交换VS电路交换 相同条件下：分组交换能够比电路交换支持更多的用户 若要连续传输大量数据（及传送时间远远大于呼叫建立时间），则采用电路交换） 应对突发数据、间接数据的时候，采用分组交换比较合适 网络核心分类： 电信网络：电路交换网络（FDM、TDM）、分子交换网络（虚电路网络、数据报网络） ISP和因特网主干 端系统-&gt;internet：接入ISP——家庭、公司、大学ISPs 接入ISP进一步互联：这样任任意两个主机才能互相发送分组 当前internet结构：十分复杂，无人能够给出准确描述 网络的网络 若所有的接入ISP直接互联O(N^2)!太大 可选方案1: 每个接入ISP连接到一个国家或全球ISP.(主干ISP) 商业角度会有竞争对手：会有多个ISP集群 但是这些ISP必须互联，产生：对等链路和IXP(internet exchange point) 可能出现区域网络（reginal net）连接接入ISP 内容提供商网络可以运行自己的网络，将服务、内容靠近最终用户。 最后结构为： 一级商业ISP：tier-1：提供国家或国际范围的覆盖 内容提供商网络（google）：私有网络，连接其数据中心与internet（绕过一级ISP和区域ISPs）1.4 分组交换网中的时延、丢包和吞吐量 k=10^3, M=10^6, G=10^9, T=10^12 时延 原因：分组到达速率&gt;输出链路容量、分组排队、等待输出链路可用 d_nodal = d_proc + d_queue + d_trans + d_prop d_proc: 节点处理延迟——差错检测，确定输出链路，通常&lt;毫秒 d_queue: 排队延迟——输出链路等待传输的时间，取决于路由器的拥塞程度 d_trans: 传输时延——L分组长度，R链路带宽，d_trans=L/R d_prop: 传播时延——d物理链路长度，s媒体中的传播速度，d_prop=d/s 在一个节点从前到后依次是：节点处理时延(d_proc)、排队时延(d_queue)、传输时延(d_trans)、传播时延(d_prop) 排队时延 链路带宽R，分组长度L，平均分组到达速率a。 流量强度=La/R La/R-&gt;0:平均排队时延很小，甚至为0 La/R&lt;1：时延较小，且会随着时间的推延而变小 La/R=1：时延不会变化，具体数值取决于当时队列长度 La/R&gt;1：平均时延较大，且随时间的推延而趋于无穷 分组丢失的原因和后果 缓存中队列的容量是有限的 分组到达队列已满，分组被丢弃 被前一个节点、源端系统重新传输，或者根本不会重传 时延带宽积=传播时延*带宽：比特单位的链路长度 丢包（分组丢失） 原因：分组到达已满队列，将被丢弃；丢弃分组可能由前序节点或者源重新发送（或者不发送） 丢包率=丢包数/已发送分组总数 吞吐量：表示在发送端与接受端之间传送数据的速率 即时吞吐量：给定时刻的速率 平均吞吐量：一段时间的平均速率 瓶颈链路：端到端路径上，限制选到端吞吐量的链路 internet场景 min(Rs,Rc,R/10): 10条链路共享1.5 协议层次及服务模型 计算机网络的体系结构 分层结构 每一层完成特定种类的服务/功能，每一层依赖底层提供的服务，通过层内的动作完成相应的功能 体系结构是计算机网络隔层及其协议的集合，是抽象的 分层结构的好处：关系清晰；有利于系统更新、维护；有利于标准化。 分层的参考模型（refernce model）可用于讨论 因特网的协议栈 应用层：支持网络应用 FTP、SMTP、HTTP 运输层：主机间的数据传输（端到端的传输） TCP、UDP 连接控制、流量控制、差错控制、分段与重组、SAP寻址（将完整报文提交给正确进程） 网络层：将数据报从源端重送到目的端 IP、路由协议 路由和分组转发、逻辑寻址、IP全局唯一 链路层：数据在网络相邻节点之间的传输 PPP、以太网、802.11 流量控制、差错控制、访问控制 node-to-node数据传输、组帧、物理寻址 物理层：在线路上传输比特流 接口特性、传输模式（单工、全/半双工）、比特同步、数据率、比特编码 基本概念 实体（entity）：任何可以发送和接收消息的“硬件”和“软件进程”，通常是一个特定的“软件模块”。 对等体（peer）：不同机器上包含对应层的实体称为对等体 协议（protocal） 语法：即数据与控制信息的结构或者格式 语义：何种控制消息，完成何种动作，做出何种应答 同步：事件实现顺序 服务（service）：保证上层对等体之间能互相通信，“下层向上层”提供的功能 服务原语：邻层交互交换的必要命令 注意：协议是同层，服务是邻层 协议数据单元（PDU）：对等层次上传输的数据但愿 服务数据单元（SDU）：层与层之间交换的数据单元 网络体系结构（Network Architrcture）：层和协议的集合 协议栈：特定的系统使用的一组协议（每层一个协议） 报文的封装 应用层：报文 运输层：报文段=报文+首部 网络层：数据报=报文段+首部 链路层：帧=数据报+首部+尾部 物理层：比特流 OSI参考模型（由国际标准化组织ISO提出） 应用层、表示层、会话层、传输层、网络层、数据链路层、物理层 表示层：应用程序解释数据的含义：加密、压缩、数据表示转化（转换为主机独立的编码） 会话层：数据交换、同步、定界、建立检查点、恢复能力（最薄一层） 实际internet没有表示层和会话层，全部交给了应用开发者，交给了应用层 TCP/IP模型 应用层（HTTP、SMTP）、运输层（TCP、UDP）、网际层（IP）、网络接口层（网络接口） 5层参考模型：综合TCP/IP模型和OSI模型第2章 应用层2.1 应用层协议原理 网络应用体系结构：C/S、P2P、混合体系结构 应用层协议定义了：各种报文类型、各种报文类型的语法、字段的语义、进程何时如何对发送报文即使对报文进行响应 应用层协议!=网络应用 必须抉择选用网络层的哪一种传输服务 TCP：面向连接、可靠传输、流量控制、拥塞控制。（不提供实施性和最小带宽承诺） UDP：不可靠传输、啥都不提供（也不提供实时性） 运用UDP的（网络）应用：流媒体、远程文件服务器、IP电话 安全性：SSL在应用层与TCP/UDP之间，以防止TCP/UDP把报文明文暴露给网络 套接字：每个网络进程独一无二的标识=主机地址（32位IP）+端口地址（16位port）=48位 web端口80，邮件端口252.2 Web和HTTP WEB属于C/S模式 信息表达协议HTML、信息传输协议HTTP web内容的表达： 对象组成 html包含各种对象是一个容器对象 可以用URL定位=主机名+路径名 HTTP 1.0——RFC1945；1.1——RFC2068 1.0传输模式——非持久性连接 客户启动TCP连接到主机域名上的http服务器(进程)，port80 接收连接并通知客户端（此前，http服务器在port80等待TCP的连接请求） 请求报文进入socket（包括URL） 接收请求报文，回答响应报文（包含请求对象） 服务器关闭http 客户端收到了关于html 文件的响应报文。（有可能发现该html 中还有很多引用对象） 对引用对象重复上面5步 2RTT+文件传输（响应报文） 1.1传输模式——持久连接：非流水线方式、流水线方式 休息一段时间之后，才断开TCP连接 非流水线方式:传输完了一个对象，才能传输下一个（引用一个对象耗时RTT） 流水线方式：一次性发送所有请求，慢慢接受（理想情况下收到所有对象耗时RTT） HTTP 请求报文=首部+实体主体 首部=请求行+首部诸行+结尾 请求行（GET，POST，HEAD） 首部诸行 单独一行\\r\\n为报文首部结束 每行以\\r\\n结尾 请求行=方法+URL+版本=GET /index.html HTTP/1.1\\r\\n GET（请求URL对象） POST（向服务器提交表单、请求WEB） HEAD（请求返回响应报文，但不包含请求对象，故障跟踪） PUT（1.1 上传文件放在实体主体字段中，由URL表明目标路径） DELETE(1.1 删除URL字段中的指定文件） 上传数据特殊方式使用GET，上传数据放在URL中：www.somesite.com/animalsearch?monkeys&amp;banana HTTP 响应报文 状态行+首部诸行+被请求的html文件 状态行=版本+状态编码+短语 状态响应码+短语 200 OK：成功，对象在报文 301 Moved Permanently：被移动过，新报文说明 400 Bad Request：服务器不懂报文 404 Not Found 505 HTTP Version Not Supported：不支持http 协议版本 talent测试 talent cis.poly.edu 80 GET /~ross/ HTTP/1.1Host: cis.poly.edu 观察返回报文 cookie 为了辨别用户身份，进行seesion跟踪而存储在用户本地终端上的数据(加密过后) 组成 http响应消息的cookie头部行 http请求消息的cookie头部行 保存在客户端主机上的cookie文件（浏览器管理） web服务器的后台数据库 原理 第一次：客户发出请求报文，服务器设置一个cookie（加在响应报文中），告诉客户和数据库 之后：客户请求报文，给出cookie，直接访问后台数据库 用处 身份认证，购物车，推荐，web-email web缓存/代理服务器技术 不访问服务器，满足客户端http请求 优点 缩短客户请求的响应时间 减少机构/组织的流量 大范围内实现有效的内容分发 缓存/代理服务器 用户向代理发出请求，代理有就返回，没有就问原始服务器 缓存服务器既充当客户端，也充当服务器 一般由ISP架设 局域网利用率、接入互联网的链路利用率 总延迟=互联网延迟（服务器查找延迟2s）+访问延迟(如果互联网链路利用率太大，访问延迟很大，排队(几分钟或者10微秒)))+局域网延迟（几微秒）=2s+几分钟+几微秒 安装web缓存；假设命中率为0.4 40%有请求立刻满足；60%的请求通过原始服务器满足 接入互联网的链路利用率下降到60%，延迟忽略不计（访问延迟） 总的平均延迟=0.62.01s+0.4n微秒&lt;1.4s 条件性get方法 如果缓存有最新的版本，则不需要发送请求对象 在http请求信息中声明所持有的版本的日期 if-modified-since: 服务器：如果缓存的版本是最新的，则响应消息中不包含对象：HTTP/1.0 304 Not Modified2.3 因特网中的电子邮件 用户代理 写作、编辑、阅读邮件报文 与服务器交互，收发email消息 邮件服务器 邮箱：存储发给该用户的email 消息队列：存储等待发送的email STMP(持续连接) 邮件服务器之间传递消息所使用的协议 客户端：将邮件发送到邮件服务器 服务器：接收和转发邮件 TCP port25 传输过程的三个阶段：握手、消息传输、关闭 命令/响应式交互：命令：（7-bit ASCII）ASCII文本；响应：状态码和短语 交互过程 HELO、MAIL FROM &lt;&gt;、RCPT TO &lt;&gt;、DATA 、QUIT 220(等待)、250（接收）、354（发送data）、221（关闭） 使用CRLF.CRLF作为结束符 SMTP vs HTTP 使用ASCII 命令/响应交互 状态码 HTTP：每个对象封装在独立的响应消息中、SMTP：多个对象在一个多分部的报文中传送 HTTP拉、SMTP推 SMTP消息格式 SMTP：email消息的传输/交换协议 RFC 822:文件消息格式标准 头部行：TO、From、Subject 消息体：消息本身、只能是ASCII MIME：多媒体邮件扩展 RFC：2045、2056 From、To、Subject、MIME-Version、Content-Transfer-Encoding（数据编码方法）、Content-Type（多媒体类型） 邮件访问协议 POP：认证/授权和下载 IMAP：能够操纵服务器上的存储消息 HTTP：163 QQ MAIL POP协议 客户端 user+用户 pass+密码 服务器响应 +OK -ERR 事物阶段 list：列出消息数量 retr：用编号获取信息 dele：删除信息 quit 下载并删除模式：如果客户欢乐客户端，无法重新读 下载并保持模式：不同客户端都可以保留信息拷贝 POP3无状态 IMAP协议 所有信息统一保存在服务器 允许用户利用文件夹组织消息 支持跨会话的用户状态 文件夹的名字 文件夹和消息ID之间的映射等等2.4 DNS：因特网的目录服务 解决域名和IP地址之间的映射关系 服务内容 域名向IP地址的翻译 主机别名 邮件服务器别名 负载均衡：web服务器 分布式层次式数据库 根服务器:13台 不知道映射，访问权威域名服务器 向本地域名服务器返回映射 获得映射 顶级域（TLD）服务器：.com DNS服务器等等 国家顶级域名等等 network solution维护com顶级域名服务器 educause维护edu顶级域名服务器 权威DNS服务器：edu.cn DNS服务器等等 提供组织内部服务器的解析服务 组织内部维护 服务提供商维护 本地域名解析服务器 每一个ISP有一个本地域名服务器（默认域名解析服务器） 当主机进行DNS查询的时候，查询发送到本地域名服务器（代理层级式） DNS查询方法 迭代查询：代理每问一次就返回一次结果（我不认识，但是你可问它）（自顶向下查询） 递归查询：代理问根域名服务器，直接一层层问下去不返回 DNS记录缓存和更新 缓存域名——IP映射 一段时间之后，失效（删除） 一般会缓存顶级域名服务器的映射（减少根DNS服务器的负载） DNS记录格式 RR 格式：(名字，值，类型，ttl) 类型 A：名字=主机域名；值：IP地址 CNAME：名字：别名；值：真实域名 NS：名字：域（edu.cn（权威域））、值：权威域名解析服务器的主机域名 MX：值是和名字对应的邮件服务器 DNS协议 查询和回复消息 消息格式相同 16位查询编号，回复相同的编号 flags：查询或回复、期望递归、递归可用、权威回答2.5 P2P文件分发 p2p特征：没有服务器、任意端系统之间直接通信、节点“阶段性”接入Internet、\b节点可能更换IP地址 文件分发：(N个文件分发给N个用户) C/S: d=max{NF/us, F/min(di)} P2P: dp2p=max{F/us, F/min(di), NF/(us+ui求和)} BitTorrent: tracker: 跟踪参与torrent的节点；torrent：交换文件块中的节点组 文件划分为256kb的chunk 节点加入torrent——没有chunk但是会逐渐积累，向tracker注册以获得节点清单，与某些节点（“邻居”）建立连接 下载的同时，节点要向其他节点上传chunk 节点可能加入或离开 节点获得完整文件来，他可能离开或者留下 获取chunk——文件交换块 给定任一时刻，不同的节点持有文件的不同chunk集合。 节点定期查询每个邻居持有的chunk列表 节点发送请求，请求缺失的chunk（稀缺优先,先向邻居请求最稀缺资源） 发送chunk：tit-for-tat Alice向4个邻居发送chunk——选择正在向其发送chunk且速率最快的4个：每10s重新评估top4 每30s素以及选择一个其他节点，向其发送chunk：新节点可能加入top4. 第3章 运输层3.1 概述和运输层服务 运输层：不同进程、逻辑通信（只考虑点到点，不考虑点和点之间的具体构造） 网络层：不同主机，逻辑通信 家庭通信的例子：进程=（要发信息的）孩子们，应用消息（报文）=信封，主机=房子，传输层协议=要送信给邮局的人，网络层协议=邮政服务 UDP数据报、TCP报文段 TCP差错检测、拥塞控制、可靠数据传输（连接建立）3.2 多路复用与多路分解 接收端进行多路分用：传输层依据头部信息，将收到的segement交给正确的socket 发送端进行多路复用：从多个socket接收数据，为每块数据封装上头部信息，生成segmennt，交给网络层。 数据报携带一个传输层的段（报文段）：每个段携带源端口号和目的端口号。 无连接的多路分用 UDP的Socket二元组表示：（目的IP，目的port） 携带源端口号，以便信息反馈 创建port：DatagramSocket mySocket1=new DatagramSocket(12345); 面向连接的分用 TCP Socket的四元组表示（源IP，源port，目的IP，目的port） 多线程的Web服务器：进程创建多线程，多TCP连接3.3 无连接运输：UDP 基于internet的IP协议：多路复用和分用、简单的错误校验 best effort服务，可能：丢失、非按顺序到达 优点：减少连接时延、实现和维护简单、首部开销小、无拥塞控制（更好地控制发送时间和速率） 流媒体、DNS、SNMP 应用层实现可靠传输 报文结构：源port（16）、目的port（16）、length（16）、checksum（16） checksum：段的内容视为16bit整数：取和，进位加在后面，按位求反。接收方计算校验和和校验字段进行比对：不等有错，相等不一定没错。3.4 可靠数据传输原理 可靠的定义：不错、不丢、不乱。 可靠数据传输协议：rdt。TOP-10问题！ 可靠数据传输协议的基本结构：接口 rdt_send():上层应用调用，将数据交给rdt以发送给对方 udt_send():被rdt调用，在不可靠信道上向接收方传输数据 rdt_rcv():分组到达接收方信道时被调用 diliver_data():被rdt调用，向上层应用交付数据 注意：分组在不可靠信道上传输是双向的，而上层接收和交付数据是单向的 packet=make_pkt(data):把数据打包变成分组 extract(packet,data):把分组提取变成数据 Rdt1.0:可靠信道上的可靠数据传输 不会发生错误、不会丢弃分组 FSM见PPT27面 Rdt2.0:产生位错误的信道（0反转位1，1反转为0） ARQ协议 一种重传机制的rdt协议 校验和检测错误 ACK/NAK: 显式地，正确接收/分组有错误 NAk: 重传分组 引入的新机制有：差错检测、接收方反馈控制消息ACK/NAK、重传 FSM 发送方：停-等协议 等状态：等待来自上层的调用 停状态：等待ACK或NAK 分组增加校验和：snd_pkt(data,checksum) 判断收到了NAK，重传分组：rdt_rcv(rcvpkt)&amp;&amp;isNAK(rcvpkt)-&gt;udt_send(sndpkt) 判断收到了ACK，回到等状态，action为空：rdt_rcv(rcvpkt)&amp;&amp;isACK(rcvpkt) 接收方 判断分组被损毁，返回NAK：rdt_rcv(rcvpkt)&amp;&amp;corrupt(rcvpkt)-&gt;udt_send(NAK) 判断分组正常，提取数据交付上层，返回ACK：rdt_rcv(rcvpkt)&amp;&amp;notcorrupt(rcvpkt)-&gt;extract(rcvpkt,data),diliver_data(data),udt_send(ACK) Rdt2.1&amp;&amp;Rdt2.2: 解决NAK、ACK错误的情况 Rdt2.1 如果错误，就重传。重传会产生重复分组，解决重复分组，添加序列号实现，接收方丢弃重复分组。两个序列号（0，1）即可 FSM： Rdt2.2: 无NAK的消息协议 发送方收到重复ACK之后，重传 FSM Rdt3.0: 处理分组丢失问题 发送方等待合理时间：如果没有ACK，重传 增加定时器 FSM见PPT 几种典型场景见PPT 没有丢失 丢失packet 丢失ACK 过早超时 Rdt3.0的性能分析：见PPT U_sender=(L/R)/(RTT+L/R) 性能很差 提高Rdt性能：流水线传输以及滑动窗口协议 等待过程中可以发送其他分组，N段流水性能提高N倍 窗口：允许使用的序列号范围，尺寸为N即最多有N个等待确认的消息 GBN * SR 3.5 面向连接的运输：TCP TCP将IP层的不可靠变为可靠 技术：流水线机制、累计确认、单一重传定时器 出发重传的事件：超时、收到重复的ACK 如何估计RTT SampleRTT：从段发出去到收到ACK的事件 SampleRTT的变化值：测量多个RTT求平均值（指数加权移动平均）EstimatedRTT=(1-alpha)EstimatedRTT+alphaSampleRTT (alpha=0.125) 测量RTT的变化值：SampleRTT和EstimatedRTT的差值DevRTT=(1-beta)DevRTT+beta|SampleRTT-EstimatedRTT| (beta=0.25) TimeoutInterval=EstimatedRTT+4*DevRTT 发送方 创建segment，序列号：segment第一个字节的编号。 开启计时器，设置超时时间TimeOutInterval 超时：重传引起超时的Segment，重起定时器 shoudaoACK：更新SendBase，若窗口中还有没有被确认的分组，重起定时器 快速重传机制 重复ACK检测分组丢失：如果sender收到对于同一个数据的3个ACK，即假定该数据之后的段已经丢失，在计时器超时之前即进行重传 超时间隔加倍：每一次TCP重传均将下一次超时间隔设置为先前值的两倍 流量控制 发送方数据过快过多，淹没接收方（buffer溢出） 窗口值的计算 接收方：LastByteRcvd – LastByteRead ≤ RcvBufferRcvWindows = RcvBuffer – [LastByteRcvd - LastByteRead] 发送方：LastByteSent – LastByteAcked ≤ RcvWindow 特殊情况：RcvWindow=0，无任何数据给发送方，发送方会向接收方发送只有一个字节数据的报文段，目的是试探 连接管理 初始化TCP变量 序列号、Buffer和流量控制信息 三次握手 客户发送SYN报文段：告知服务器序列号 服务器收到SYN报文段，回复SYNACK报文段：建立缓存区、回复序列号 客户端收到SYNACK，回复ACK报文段，可能包含数据 关闭请求：一般是客户机关闭 客户机向服务器发送TCP FIN报文段 服务器收到FIN，回复ACK，关闭连接，发送FIN 收到FIN，回复ACK；重复收到FIN，重发ACK 服务器收到ACK，真正关闭连接 TCP连接管理的状态序列：见PPT813.6 拥塞控制原理 拥塞的表现：分组丢失、分组延迟过大 拥塞控制和流量控制的区别：拥塞控制着眼于网络处理，流量控制着眼于接收方处理 场景一：两个发送方、两个接收方，一个具有无限大缓存的路由器，没有重传。假定带宽为C。PPT83 场景二：有限缓存的一个路由器 如果sender知道buffer信息，有buffer发数据，没有buffer就不发。lamdaIn=lamdaOut 丢失后才重发。lamdaIn‘&gt;lamdaIn&gt;=lamdaOut 定时器超时重传。lamdaIn‘&gt;&gt;lamdaIn=lamdaOut不必要的重传会占用链路带宽 场景三：四个发送方、多跳、超时/重传 另一个代价：分组被drop掉了，相当于浪费了上游的资源。 lamdaIn’过大，lamdaOut趋近于0，即所有资源都被浪费掉了 拥塞控制的方法 端到端的拥塞控制：TCP的方法。路由器不需要提供支持，观察丢失、时间延迟等网络行为判断是否拥塞。 网络辅助的拥塞控制：路由器向发送方显示地反馈网络拥塞信息。（阻塞分组的形式指示发送方应该采取何种速率） ATM ABR拥塞控制（网络辅助） RM cells：交换机设置RM cell位：NI bit——rate不允许增长，CI bit——拥塞指示。RM cell由接收方返回给发送方 RM cell的ER字段（两个字节）：显式的速率字段，发送方货值路径所能支持的最小速率 数据cell的EFCI位：拥塞的交换机将其设置为1，如果RM cell前面的data cell的EFCI为1，发送方在返回RM cell中置CI位。3.7 TCP拥塞控制 TCP的发送方限制外发流量的速率： 拥塞窗口：LastByteSent-LastByteAcked&lt;=CongWinrate=congWin/RTT bytes/sec 发送方感知拥塞的方式：发送超时、三个冗余ACK TCP 拥塞算法Reno： 加性增，乘性减 Additive Increase：每个RTT将CongWin增大一个MSS（防止拥塞窗口缓慢增大，过早出现拥塞） Multiplicative Decrease：发生丢包事件后，当前COngWin大小减半（大大减少注入到网络中的分组数） 慢启动SS： TCP建立连接时，CongWin=1 连接开始时，指数性增长。每个RTT时，CongWin翻倍（收到了ACK之后） 门限值ssThread 对超时事件的反应： 门限值设置为当前CingWin的一半 将CongWin设置为1个MSS大小 窗口以指数增大 达到门限值之后，线性增长。 对于重复收到3个ACK的反应——快速重传 门限值设置为但概念CongWin的一半，将CongWin减少为现在的门限值+3MSS 线性增大拥塞窗口 早起的Tahoe版本在这种情况下也将CongWin降为1。 Reno的改进：New Reno TCP的性能： 丢包发生时，窗口大小为W，吞吐量为W/RTT 丢包事件发生之后，窗口大小减小为W/2，吞吐量为W/2RTT 平均吞吐量为0.75W/RTT 吞吐量是丢包率L的函数：1.22MSS/(RTT*sqrt(L)) 公平性分析： 目标：如果K个TCP连接共享同一个带宽为R的瓶颈链路，每个连接的平均传输速率为R/K。 TCP是公平的吗：是的，P118 TCP和UDP一起，无公平性。UDP恒定速率发送，而TCP会被拥塞机制限制速率 只使用TCP也不存在公平性。某些应用可以并发产生TCP连接。例如：链路速率为R，已经有9个连接，那么： 新来的请求1个TCP，被分到R/10的速率，新来的请求11个TCP，被分到R/2的速率 传输层主要内容： 复用/解复用 可靠数据传输 流量控制 拥塞控制 UDP、TCP第4章 网络层：数据平面4.1 网络层概述 功能：实现主机到主机之间的通信 发送主机向接收主机传送数据段（segment）。 发送主机：将数据段封装到数据报（datagram）中。 接收主机：向传输层交付数据段 路由器检验所有穿越它的IP数据报的头部域 核心功能：转发和路由、连接建立 转发：从路由器的输入端口转移到合适的输出端口（转发表） 路由：确定分组从源到目的经过的路径（路由算法） 连接建立和传输层不同点：网络层是两个主机之间。路径上的路由器等网络设备都要参与其中。传输层是应用进程之间的连接，对中间网络设备透明 网络层服务模型 无连接服务：数据报网络 不事先为系列分组的传输确定传输路径。 每个分组独立确定传输路径，不同分组可能传输路径不同 连接服务：虚电路网络 首先为系列分组的传输确定从源到目的经过的路径 沿着该路径（连接）传输系列分组，系列分组的传输路径相同 传输结束后，拆除连接 虚电路网络 虚电路：源主机到目的主机类似于电路的逻辑连接 分组交换（与电路交换的区别）、每个分组的传输利用链路的全部带宽 源主机到目的主机的路径经过的网络层设备共同完成虚电路的功能 通信过程：呼叫建立-&gt;数据传输-&gt;拆除呼叫 建立的过程中会分配VCID 每个分组携带虚电路标识VCID，而不是目的主机地址 虚电路经过的每个网络设备（如路由器），都需要维护虚电路的状态 优点：继承了电路交换和分组交换的优点 链路、网络设备资源可以面向VC进行预分配（预分配资源=可预期服务性能） 占用全部带宽 VC的具体实现 源主机到目的主机一条路径 每一段链路有一个虚电路号VCID，沿这段链路传输的分组携带对应虚电路的VCID而不是目的地址。（因为每一段链路上的设备的能力是各不相同的） 路由器转发分组时，依据转发表改写/替换虚电路号 每一个路由器需要维护VC连接的状态信息：虚电路建立对应接入口的增加，拆除对应着删除 虚电路信令协议：用于VC的建立、维护和拆除（internet网络不采用） c启动呼叫、s呼叫到达、s接受呼叫、c呼叫连接、c数据流开始、s接收数据 数据报网络 网络层无连接，每个分组携带目的地址 路由器根据目的地址转发分组：根据路由协议和算法构造转发表，检索转发表，每一个分组独立选路。 转发表：目的地址、输出链路 目的地址（32为二进制）为地址范围，聚合转发表入口 地址范围为连续地址（前n比特有相同地址） 最长前缀匹配优先：遇到都可以匹配的时候，发送最长前缀对应的链路接口 数据报网络 VS VC网络 Internet（数据报网络）：简化网络，复杂“边缘”（意思是很多事情都在端系统完成） 没有严格的时间需求 链路众多，特点和性能各异，统一服务困难 ”智能“端系统：可以自适应、实现性能控制和差错恢复 ATM网络（VC网络）：简化“边缘”，复杂网络（意思是很多事情都在网络上完成） 电话网络演化而来，核心业务是实时对话：严格的时间、可靠性需求 ”哑“端系统（非智能）：电话机、传真机4.2 路由器工作原理 路由器的结构 路由选择和分组转发两个部分组成 路由选择：路由选择处理机=路由选择协议+路由表 交换结构：分组处理——转发表 线路端接：物理层位流级的接收 数据链路层处理（协议、拆封）：以太网等等 网络层处理（排队、查找、转发） 输入端口分散式交换: 给出“目的地址”，使用“路由选择表”（存储于输入端口的内存中），查找“输出端口” 目标：以“线路速度”完成输入端口的处理 排队：if 到达速度 &gt; 转发给结构的速度 线头阻塞：FIFO机制造成的，因为输入端的FIFO首先处理队列靠前的数据，队列后面的数据的缓存口可能已经空闲，但是因为得不到处理而等待。 交换结构 经内存交换 CPU控制完成 分组被拷贝到内存中，CPU控制下输出到输出端口 受限于内存的带宽（每个分组走两次总线） 经总线交换 输入端口经一根共享总线，直接传送到输出端口 受限于总线的带宽 32Gbps总线，Cisco 5600对于运行在接入网或者企业网的路由器，通过总线交换的转发速度是足够的 经内连网络 优点为：克服总线带宽限制 先进设计：将长度变化的IP分组，分片乘固定尺寸的“信元”，通过交换结构对“信元“进行转发 Banyan网络：过去在多处理机计算机体系结构中，用来互联多个处理器网络 60Gbps，Cisco 12000 输出端口 缓存管理：当“交换结构”将分组“交付给输出端口的速率”超过输出“链路的速率”时，输出端口缓存 调度原则：在“数据报队列”中，“选择数据报”进行传输 缓存区的设置 RFC3439: B=RTT*R 理论研究，N条TCP连接经过的链路而言：B=RTT*R/sqrt(N) 输出端口调度策略：先来先服务（FCFS）、加权公平排队（WFQ） 分组丢弃策略 弃尾策略 删除一个或者多个已排队的分组 主动队列管理——随即早期检测RED 每时每刻计算平均的队列长度avgth 最小阈值minth、醉倒阈值maxth avgth小雨minth，允许分组入列 avgth大于maxth，分组被标记或者丢弃 在两者之间，按照概率标记或者丢弃分组4.3 网际协议：IPv4、寻址、IPv6及其他 IP数据报结构：首部+数据 首部：固定部分+可变部分 固定部分： 版本号：4 bit：4-&gt;ipv4；6-&gt;ipv6 首部长度：4 bit：最大数是15（每一个单位对应4个字节/一行） 典型IP分组第一个字节为45 服务类型TOS（区分服务）：8 bit：只有在网络提供区分服务才有效，一般不可用，一般00H 总长度：16 bit：首部+数据的总长度：最大65535B。and最小的IP分组首部为20B。故IP分组可以封装的最大数据为：65535-20=65515B 生存时间（TTL）：8 bit：IP分组在网络中可以通过的路由器数，每转发一次分组TTL减1，如果TTL=0，丢弃该IP分组 协议：8 bit：指示是哪个数据报：实现复用/分用。eg. 6为TCP，17为UDP。 首部校验和：16 bit：计算校验和时该字段全0。 源地址、目的地址：32 bit：分别标识发送分组的源主机/路由器（网络接口）、接受分组的目的主机/路由器（网络接口）的IP地址。 可变部分 选项字段：1-40B：携带安全、源选路径、时间戳和路由记录等内容。实际上很少被使用。 填充：0-3B之间，补齐整个首部，符合32为对齐，保证首部长度是4字节的倍数。 IP分片 MTU（最大传输单元）：链路层数据帧可封装数据的上限 不同链路的MTU不一样 分片与重组 大IP分组向小MTU链路转发的时候，可以被“分片”。路由器只分不装，最后在目的主机组装 IP首部的相关字段用于“标识分片”以及确定分片的相关顺序（如果没有收全则全部丢弃） 标识ID：16 bit：一个计数器，每产生一个IP分组计数器加一，作为该IP分组的标识 标志位：3 bit： DF：是否能对大IP分组进行分片（1不行，0可以） MF：1代表不是独立的IP分组，是分片过后的，且不是最后一片；0代表最后一片（末分片） 片偏移 13 bit：一个IP分组“分片”封装“源IP分组”的数据“相对偏移量”。 如果没有被分片，这里一定是0 片偏移量以8字节为单位 分片过程：L为ip分组长度，M为待转发链路的MTU L&gt;M,DF=0可以分片 复制源IP分组的标识 除了最后一个分片，其他分片均分为MTU允许的最大分片 最大分片可封装的数据为：d=[(M-20)/8]_向下取整*8 需要总片数为：n=[(L-20)/d]_向上取整 每片的片偏移字段取值为：Fi=d/8*(i-1) 每一片总长度d+20，最后一片L-(n-1)*d MF的取值：前n-1片取1，最后一片取0 IP编址 IP分组：源地址、目的地址 接口：主机/路由器与物理链路的连接：实现网络层功能、路由器通常有多个接口、主机通常只有1到2个接口 IPv4: 32bit：编号标识主机、路由器接口 IP地址与每个接口关联 IP地址=网络号NetID+主机号HostID IP子网：相同网络号设备接口+不跨越路由器就可以彼此互联 有类编址： 50% A类：（0+7位）NetID+（24位）HostID（0.0.0.0-127.255.255.255） 25% B类：（10+14位）NetID+（16位）HostID (128.0.0.0-191.255.255.255) 12.5% C类：（110+21位）NetID+（8位）HostID (192.0.0.0-223.255.255.255) 6.25% D类：1110+28位（组播地址）(223.0.0.0-239.255.255.255) 6.25%：E类：1111+28位（研究保留）(240.0.0.0-255.255.255.255) 特殊IP地址：见PPT 私有IP地址 A：NETID：10 B：NETID：172.16-172.31 C：NETID：192.168.0-192.168.255 IP子网：NetID+SubID（原网络主机号的部分比特）+HostID 路由器将各个子网连接在一起 子网掩码：NetID和SubNetID全部取1，HostID全部取0 子网掩码的运用：目的IP与子网掩码按位与运算，提取子网地址 可分配地址范围：去掉主机域全0（子网地址）和主机域全1的（广播地址）。 IP地址扩展——构造超网 从网络号中借用一部分位数作为主机号 CIDR：无类域间路由 消除A、B、C类地址的界限，NetID+SubID=prefix可以任意长度 子网地址与子网掩码，方便子网划分 无类地址的格式：a.b.c.d/x (x为前缀长度，十进制) 优点 提高IPv4地址空间分配效率 提高路由效率：很多子网聚合成一个较大的子网，构造超网 路由聚合（减少路由表的表项）：满足最长前缀匹配优先 DHCP协议：主机如何获取IP地址 静态“硬编码”：IP、子网掩码、默认网关（路由器接口地址） 动态DHCP（port 67） 从服务器动态获取：IP、子网掩码、默认网关、DNS服务器名称与IP地址 即插即用型的协议，允许地址重用、支持在用地址的续租、支持移动用户加入网络 新主机获取本网IP过程： 主机，广播DHCP发现报文（DHCP discover） DHCP服务器响应，DHCP offer（DHCP提供报文） “DHCP request”（请求报文） “DHCP ack”（确定报文） 报文在传输层采用UDP 网络地址转换NAT：（私有地址在共有网络上的转换） NAT的动机： 本地IP变更，无需告诉外界 变更ISP时，无需修改内部网络的IP地址 内部网络设备对外界网络不可见，不能直接寻址，保证安全性 实现（NAT转换表） 替换：(源IP地址，源端口号)-&gt;(NAT IP地址，新端口号) 记录：(源IP地址，源端口号)和(NAT IP地址，新端口号)记录下来 替换：(源IP地址，源端口号)替换每个进入内网的IP数据报的(目的IP地址，目的端口号)，即(NAT IP地址，新端口号) NAT的主要争议：违反了端到端的原则，节点不应该介入修改IP地址和端口号；路由器仅应当处理高达第三层的分组；应当采用IPv6来解决IP地址短缺问题 NAT穿透问题（外部客户访问） 采用端口NAT，在路由器中静态的为服务器配置”一条记录“如(123.76.29.7,80) 总是指向(10.0.0.1,80) 通用即插即用UPnP IGD协议，了解公共IP地址 向路由器注册、移除映射记录（内部ip，内部port）-&gt; (公共ip，公共port) 内部程序向外部程序公开(公共ip，公共port) 适用于p2p 中继（skype）（有一个中继服务器） 10.0.0.1通过NAT与中继建立了连接 客户端与中继建立了连接 建立中继 IPv6 动机：32位IPv4分配殆尽、改变首部格式（快速处理、转发数据报；支持QoS） 格式：固定长度位40byte的首部、不允许分片（源主机分，目的主机组装） 流量类型：用于区分数据报类型 没有检查和，中间节点无需计算 流标签20 bit 原地址、目的地址：128bit IPv6地址的格式 一般地址——1080:0:FF:0:8:800:200C:417A 压缩形式——FF01:0:0:0:0:0:0:43=FF01::43 IPv4的嵌入形式：前80bit是0，然后16bit是1，剩下32bit是IPv4地址 使用前缀，不再使用掩码 URL中IP通常用中括号括起来 IPv4到IPv6的迁移 隧道技术：IPv6数据报作为IPv4数据报的载荷进行封装，穿越IPv4网络。 设置标志日，统一迁移（事实上，没有一个特定的日子去区分IPv4和IPv6网络，两者会长时间共存） 双栈技术： 新加入的设备支持IPv4/IPv6双协议栈。 链路上，如果源和目标均支持IPv6，则使用IPv6进行通信，任意一方不支持IPv6，则使用IPv4进行通信 可能会出现信息丢失 第5章 网络层：控制平面5.1 概述 默认路由器：一台主机“直接”连接到的路由器 源路由器：“源主机”的默认路由器 目的路由器：“目标主机”的默认路由器 选路算法的目的：找出连接“源路由器”到“目的路由器”的一条“好的”（费用最低）的路径 5.2 路由选择算法 网络抽象——图 路由器：节点；链路：边 cost费用——c(x,x`)：根据需要进行设置（可以是1，带宽的倒数、拥塞程度） 描述路径好坏：路径费用越小越好 静态路由&amp;动态路由 静态路由：手工配置、路由更新慢、优先级高 动态路由：算法计算、更新快、定期更新、及时响应链路费用或拓扑变化 全局信息&amp;分散信息 全局信息算法：所有路由器掌握”完整的“网络拓扑和”链路费用信息“eg 链路状态路由算法（LS） 分散信息算法：路由器只掌握物理“相连的邻居”以及“链路费用”、邻居间的信息交换，运算的迭代过程eg 距离向量路由算法（DV） 负载敏感类型的分类 负载敏感算法：链路费用会动态地变化，反映出链路的当前状况 负载迟钝算法：链路费用不明显地反应链路的当前状况 LS Dijkstra 算出源到所有节点的最小路，最后通过跟踪节点，找到路径 c(x,y)=cost/无穷 D(v):从源到目的v的当前路径费用权值 p(v): 沿从源到v的当前路径，v的前序节点 N`：已经找到最小费用路径的节点集合 最短路径树和最终转发表： 最短路径树：构造dijkstra表的时候，构造出的树 目的、链路：路由器只反映第一跳 算法复杂型：O(n^2)，利用堆的复杂性为:O(mlogn)。 存在震荡的可能：假设链路费用是该链路承载的信息量。会产生刚路由到一个路由器，更新路由表，又路由回去的情况。 解决方案：强制链路费用不依赖于所承载的流量、确保所有的路由器不同时进行LS算法。 距离向量路由算法 Bellman-Ford dx(y):从x到y最短路径的费用。dx(y)=min{c(x,v)+dv(y)}。v为x的邻居 重点：节点获得最短路径的下一跳，用于信息转发表。（选择哪个v） Dx(y):x到y的最小费用估计。x维护距离向量(DV):Dx=[Dx(y):y属于N] 节点x维护自己的Dx，又已知c(x,v)，还要维护邻居的距离向量Dv 核心思想 每个节点不定时地维护自身的DV，发送给邻居 当x接收到邻居的新的DV估计时，即依据BF更新自身的距离向量估计Dx(y)=min{c(x,v)+Dv(y)}（y属于N） Dx(y)收敛与dx(y) 异步迭代：局部链路费用的改变、来自邻居的DV更新 分布式：每个节点只有当DV变化的时候，才通告给邻居，邻居在必要的时候，再通告给他们的邻居 链路状态传播的特点： 好消息传的块 坏消息传的慢 解决方案：毒性逆转如果z通过y选路到达目的地x，则z将通告y它到x的距离是无穷大。（没有解决无穷计数的问题） 解决方案：定义最大度量：定义一个最大的有效费用值，如15跳步，16跳步表示无穷。 LS vs DV 报文复杂度 LS：n个节点，E条链路，需要发送O(nE) DV：只在直连的邻居间交换报文 收敛速度 LS：是一个要求O(nE)个报文的O(n^2)算法，可能有震荡（链路边为信息流量） DV：收敛事件不确定，可能会遇到选路环路，可能遇到无穷问题 健壮性 LS：节点能够向其连接的链路广播”不正确的费用“，每个节点只计算自己的转发表 DV：一个节点可以向任意或所有的节点通告其“不正确的最低费用路径”，每个节点的计算都会传递给它的邻居（错误经过网络传播） 层次路由（internet采用） 原因：网络过大，无法抽象成网络（规模太大6亿个node，路由表无法存储和查找、交换量巨大，占有带宽、每个网络都期望自主控制内部路由（网络的网络）） 聚合路由器为一个区域：自治系统AS 同一AS内路由器运行相同路由协议：自治系统内部路由协议；butongAS自治系统内部路由协议可能不同 网关路由器：位于AS边缘；通过链路连接其他AS的网关路由器 转发表：由AS内外的选路算法共同决定 自治系统间的路由任务：PPT122（单AS、多AS） 多AS的选路策略：热土豆路由：将报文发送到最近（内部最小）的路由器5.3 因特网中自治系统内部的路由选择：OSPF AS内部路由协议（内部网络协议）IGP 最常见的AS内部路由协议：RIP——路由信息协议；OSPF——开放最短路径协议；IGRP——内部网关路由协议（Cisco私有） RIP——DV 距离度量：跳步数（最大15）（适用于小网络） 每隔30s，邻居见交换一次DV，成为通告 每次通告：最多25个目的子网（CIDR形式） 路由表形式：destination_subnet next_router hops_to_des 失效、恢复：180s没有收到通告：邻居/链路失效；重新计算经过该邻居的路由；向邻居发送新报告 RIP路由表里有一个应用进程进行管理，通过UDP进行发送 OSPF——LS 分布式的链路状态协议 三个要点： 向本自治系统中所有路由器发送信息，使用的方法是洪泛法 发送的信息就是与“本路由器相邻”的所有路由器的“链路状态” 只有当“链路状态”发生变化的时候，路由器采用洪泛法向“所有路由器”发送此消息 链路状态数据库 这个数据库是一个拳王的拓扑结构图，全网范围一致 OSPF更新过程收敛快 协议具体内容 提供对给定链路权值集合确定最低费用路径机制（但不强行设置权值策略） 即使链路状态未发生变化，每30min广播一次链路状态 以OSPF通告的形式封装在OSPF报文中，由IP分组承载 OSPF有安全性保障：所有OSPF报文可以被认证（放置恶意入侵） OSPF通告都是有序列号的，以放置重放攻击 OSPF中支持多跳具有相同费用的路径 OSPF支持多播选路（允许选用多条费用相同的路径）和层次路由 层次OSPF OSPF将AS再划分为若干个更小的范围，叫做区域 每个区域有32 bit标识符 一个区域内的路由器不超过200个 区域划分 两级分层：（局部）区域、主干区（局部区域只知道去往其他网络区域的方向/最短路） 边界区域路由器：“汇总“到达所在区网络的距离，通告给其他区边界路由器 主干路由器：在主干区内运行OSPF算法 AS边界路由器：连接其他AS，网关路由器 区域划分优点： 区域洪泛，减少了网络通信量 一个区域内不知道其他区域的拓扑情况 上层区域叫做主干区域，主干区域标识符为0.0.0.0，用于联通下层区域5.4 ISP之间的路由选择：BGP 边界网关协议BGP（4.0）：internet连接成一个整体的关键 eBGP：AS向邻居AS获取可达信息 iBGP：向AS内部所有路由器传播可达信息 BGP和策略有关 BGP报文：基于半永久的TCP连接，告知去往不同目的前缀的路径 OPEN：两个BGP路由器建立TCP连接，并认证发送方 UPDATE：通告新路径 KEEPALIVE：没有UPDATE时候，保活连接；也用于对OPEN请求的确认 NOTIFICATION：报告先前报文的差错，用于关闭连接 当AS3通告一个前缀给AS1时：AS3承诺将数据报转发给该子网、AS3在通告中会聚合网络前缀 3c和1c之间，AS3利用eBGP会话向AS1发送前缀可达信息。 1c则可利用iBGP向AS1内的所有路由器分发新的前缀可达信息 1b可以/不一定，进一步通过1b到2a进行eBGP通话，向AS2通告新的可达性信息 路由器获得新的前缀可达性时，在其转发表中新增加关于该前缀的入口（路由项）。 BGP属性 路由=前缀+属性 两个重要属性 AS-PATH（AS路径） NEXT-HOP（下一跳）：指向下一个AS（可能从当前AS到下一跳AS存在多条链路） BGP路由选择：基于策略选择，可以指定AS-PATH中不流过谁 本地偏好 最短AS-PATH(经过的AS最少) 最近NEXT-HOP路由器(热土豆路由) 附加准则 路由选择策略 为什么采用不同AS内和AS间的协议：AS间有策略问题、AS内部不需要考虑决策、需要层次路由、内部为性能主导、其间为策略主导 5.6 ICMP：因特网控制报文协议 用于主机、路由器、网关之间交换网络层信息 差错报告：例如有主机、网络、端口、协议不可达等等 网络探寻/回声请求、回答（ping 应用程序） 有两类ICMP报文： 差错报告报文：目的不可达、源抑制、超时/超期、参数问题、重定向 网络探寻报文：回声请求及应答报文、时间戳请求与应答报文 不发送ICMP差错报文的特殊情况 如果ICMP差错报告报文出现了错误，不再对此发送ICMP差错报告报文 除了第一个IP数据报分片之外，对所有后续分片均不发送ICMP差错报告报文 广播IP数据报，不发送ICMP差错报告报文 对具有特殊地址（127.0.0.1或0.0.0.0）的IP数据报不发送ICMP差错报告报文 几种ICMP报文不再使用 信息请求与应答 子网掩码请求和应答 路由器询问和通告 ICMP报文格式（封装到IP数据报传输 前4字节：类型 8 bit、代码 8 bit、校验和 16 bit 4-8字节：取决于ICMP报文的类型（差错报告报文和ICMP询问报文） ICMP的数据部分（长度取决于类型） ICMP的差错报文数据封装 首先我们找到出差错的IP数据报=IP数据报首部+8字节 ICMP差错报告报文=ICMP的前8字节+IP数据报首部+8字节 装入ICMP报文的IP数据报=首部+ICMP差错报告报文第6章 链路层和局域网6.1 链路层概述 术语：节点、链路（有线、无线）、帧（封装数据报） 功能： 通过一条链路、从一个节点到另一个物理链路“直接相连”的相邻节点传送数据报 数据报在不同的链路上可能由不同的链路层协议进行处理（例如第一段用PPP，中间用广域链路层协议、最后用以太网处理） 链路层服务： 成帧（组帧）、链路访问（链路接入） 封装数据报，加首部和尾部、帧同步 共享介质，信道访问 “帧首部”中的mac地址，用于标识帧的源和目的（用于不同IP地址） 可靠传递（相邻节点间的可靠交付） 很少用于误码率BER低的链路 用于误码率高的电路（如无线链路） 流量控制 在相邻的收发节点间限制流量 差错检测 “信号衰减”和“电磁干扰”噪声导致出错 接收方监测到错误存在：通知发送方“重传”或者直接“丢弃”帧 差错纠正 接收方检测和“纠正”帧的错误，“不用重传” 半双工和全双工 半双工：两端节点都能传输分组，但是不能同时传输 全双工：同时双向 链路层的实现 在每一台设备上：主机、交换机、路由器：适配器——网卡、NIC 这些适配器，与系统总线相连 硬件、软件、固件结合 适配器通信 发送端：组帧、差错检测位、可靠交付、流量监测 接受端：找错、取数据给网络层 适配器是半自主单元，帧的接收、发送、检错、丢弃，全自主进行；向上提交数据要节点干预；最终受控于节点6.2 差错检测和纠正技术 原理：差错编码、冗余比特、转换函数。 不是100%可靠的 EDC：纠错比特（越长出错概率越低） 差错编码的检错和纠错能力 分为检错码和纠错码 haming 距离：编码集合中两编码最少不同位数，也称码距 对于检错码，若果汉明距离为r+1，则可以检测1位错 对于纠错码，如果汉明距离ds=2r+1，则该错误编码可以纠正r位的差错 奇偶校验码 1位比特校验位：检测奇数位差错 二维奇偶校验：纠正同一行/列的奇数位错（纠正单比特错误） 因特网检查和checksum 发送方 数据段内容作为16bit的整数序列 累加求和，计算和1的补码 放入分组的校验和字段（TCP、UCP、IP） 接收方 同样计算 得到checksum与校验和字段中的值是否相同 仅用于TCP、UDP、IPv4 CRC（详见计算机组成原理） 我们有：数据D、r+1位的生成多项式G 目标：r个比特的CRC：R &lt;D,R&gt;恰好能被G整除（模2计算） 接收方已经知道G，用G取除&lt;D,R&gt;，若余数非0，则检测到错误 能够检测所有小于r+1位的比特错误 广泛运用于以太网、802.11 WIFI、ATM6.3 多路访问链路协议 两种链路 点到点链路：PPP/以太网交换机和主机之间的点到点链路 广播链路：传统总线以太网/HFC/802.11无线LAN 广播链路的特点： 单个共享广播信道 两个或多个节点同时传输：互相干扰（碰撞：一个节点同时收到两个或者多个信号） 多路访问协议 分布式算法——决定节点如何共享信道、节点何时可以传输数据 注意：如果要协商信道的分配，要使用信道本身（没有额外的信道来协调） 理想mac协议——速率为R的广播信道 一个节点发送：为R M个节点期望发送，为R/M 完全分散控制：无需特定节点协调、无需时钟、间隙同步 简单 mac协议的分类 信道划分mac协议 多路复用技术 TDMA、FDMA、CDMA、WDMA 容易有未用时隙空闲或者未用频带空闲 随机访问mac协议 信道不划分，允许冲突 采用冲突恢复机制 当节点要发送分组时：利用R发送，没有事先节点协调 两个或多个节点同时传输冲突 轮流协议（轮转协议） 节点轮流使用信道 随机访问协议 当节点要发送分组时：利用R发送，没有事先节点协调 两个或多个节点同时传输冲突 时隙ALOHA 如果发生冲突，该节点在下一个时间间隙以概率p重传该帧，直至成功 优点：单节点活动，信道全速率传输；只需要同步时隙，高度分散化 缺点：空闲时隙浪费、节点也许能以远小于分组传输时间监测到冲突、时钟同步 效率 一个节点在一个时隙发送成功概率=p(1-p)^(N-1) 对任意节点一个时隙发送成功概率=Np(1-p)^(N-1) 最大效率：使得对于上述式子最大的p* 上述式子对N求极限，得到1/e=37%；信道被成功利用的时间只有37% 纯ALOHA 没有规定一个时隙只能发一个(不同步) t0时刻发送的帧会在t0-1和t0+1检测其冲突——冲突可能性增大 给定节点成功发送概率=p*(1-p)^2(N-1)=18% CSMA(载波监听多路访问协议) 发送帧之前监听信道： 空闲：传输整个帧 忙：推迟发送：1-坚持、非坚持(推迟监听)、时隙非坚持(划分时隙，每个时隙开始才能发送帧)、P-坚持 由于信号传播延迟，重瞳仍然有可能发生 CSMA/CD(collision detection) 短时间内可以检测到冲突，冲突后停止传输，减少信道浪费 ”别人开始说话则停止说话“ 冲突检测 在有线LANs中比较容易:测量“信号强度”，比较“收、发的信号” 在无线LANs中比较困难: 传输时接收器是关闭的（接收信号强度淹没在本地发射信号强度下） “边发边听，不发不听 数据帧最小长度L，信号传播速度V(m/s) L/R&gt;=2dmax/V (在A信号回传成功之前，B的数据不可以发出来) 效率 Tprop=LAN两个节点间的最大传播延迟 Ttrans=最长帧传输延迟效率=1/(1+5tprop/ttrans) tprop趋近于0或者ttrans趋近于无穷的时候，效率趋近于1 轮转访问协议 信道划分协议：负载重，效率高且公平；负载轻，效率低 随机访问mac协议：负载轻，共享信道效率高（单个节点全部带宽）;负载重产生严重开销 轮询(polling): 主节点轮流邀请从属节点发送数据。典型应用：“哑”从属设备 问题：轮询开销、等待延迟、单点故障 令牌传递：依次从一个节点传递到下一个节点。令牌——特殊帧 mac协议总结 随机访问mac协议：用于以太网、802.11无线局域网 轮转访问mac协议：蓝牙、令牌环网6.4 交换局域网 32位的IP地址 接口的网络层地址 用于标识网络层分组，支持分组转发 MAC地址（LAN地址、物理地址、以太网地址） 48位（用于大部分LANs），固化在网卡的ROM中。FF-FF-FF-FF-FF-FF 作用：用于局域网内标识一个帧从哪个接口，到达哪个物理相连的其他接口 每一块网卡都有一个唯一的MAC地址 MAC地址由IEEE统一管理和分配 网卡生产上购买MAC地址空间的前24bit MAC地址是平面地址：可以携带，从一个LAN到另外一个LAN IP不可携带，IP地址依赖于节点连接到哪个子网 ARP地址解析协议 解决问题：同一个LAN内，如何在已经知道目的接口IP地址的前提下确定其MAC地址。 ARP表：LAN中的每个IP结点（主机、路由器）维护一个表 &lt;IP，MAC，TTL&gt; TTL：经过这个事件后该映射关系会被遗弃 同一局域网内，A要给B发送数据报 B的MAC地址不再A的ARP表中。 A广播ARP查询分组，其中包含B的IP地址 目的FF-FF-FF-FF-FF-FF LAN中所有节点都会接收ARP查询 B接收ARP查询分组，IP地址匹配成功，向A应答B的MAC地址：用单波帧向A发送应答 A在其ARP标中，缓存B的IP-MAC配对，超时后，再次刷新 ARP即插即用，自主创建ARP表，无需干预 从以一个LAN到另一个LAN(A到B) A构造IP数据报，其中源IP是A的IP地址，目的IP地址是B的IP地址 A构造数据链路层帧，其中源MAC地址是A的MAC地址，目的MAC地址是路由器左接口的MAC地址，封装数据报 帧从A发送至R R接收帧，提取IP数据报，传递给上层IP协议 R转发IP数据报，创建链路层帧，其中源MAC地址是R右接口的MAC地址，目的MAC地址是B的MAC地址，封装A到B的IP数据报。（其中源和目的地址不变） 以太网 造价低廉、运用广泛的占有“统治地位”的有线LAN技术 物理拓扑 总线：上世纪90年代中期流行，所有节点在同一冲突域 星型结构：目前主楼的网络拓扑 中心交换机 每一个节点一个单独的冲突域（节点彼此不冲突） 以太网：不可靠、无连接服务 无连接：发送帧的网卡和接收帧的网卡不“握手” 不可靠：接收网卡不想发送网卡确认 差错帧直接丢弃，丢弃帧中的数据恢复依靠高层协议 以太网采用的MAC协议：指数退避算法的CSMA/CD 如果NIC检测到其他节点传输数据，则终止发送，并发送堵塞信号jam signal 终止发送后，NIC进行二次指数退避 第m次连续冲突后 取n=max(m,10) NIC从0～2^n-1中随机选择一个数K NIC等待K*512比特的传输延迟时间，再返回第2步 连续冲突的次数越多，平均等待时间越长 以太网帧结构 发送端网卡将IP数据报（或其他网络层协议分组）封装到以太网帧中 前导码（8B）（Preamble）：7个字节的10101010，第8字节为10101011（用于发送端与接受端的时钟同步） 目的MAC地址、源MAC地址：各6B 如果网卡的MAC地址与收到的帧的目的MAC地址匹配，或者帧的目的MAC地址为广播地址FF-FF-FF-FF-FF-FF，则网卡接收该帧，并将其封装的网络层分组交给相应的网络层协议 类型（Type 2B）：指示帧中封装的是哪种高层协议的分组（如IP数据报、Novell IPX数据报、AppleTalk数据报） 数据Data(46B-1500B——MTU)：指上层协议载荷 Datamin=46B Lmin=64B Datamin=64B-12B-2B-4B CRC（4B）：循环冗余校验码(丢弃差错帧) 许多不同的以太网标准 相同的MAC协议和帧格式 不同速率：2Mbps，10Mbps，100Mbps，1Gbps，10Gbps 不同物理介质：光纤、电缆 以太网交换机 链路层设备 存储——转发以太网帧 检验到达帧的目的MAC地址，选择性向一个或多个链路发送帧 利用CSMA/CD访问链路，发送帧。 透明：主机感知不到交换机的存在 即插即用 自学习：交换机无需配置 多端口同时传输 主机利用独享的链路直接连接交换机 交换机缓存帧 交换机在每一段链路上利用CSMA/CD发送帧，但无冲突，且可以全双工（每段链路一个独立的冲突域） 交换：A-A’与B-B’的传输可以同时进行，没有冲突(一台交换机上可以支持多个交换) 交换机转发表：交换表 (主机mac，接口，时间戳) 自学习 帧到达的时候，交换机学习通过源MAC地址学习到了主机MAC，学习到了该帧的接口。 交换机：帧过滤/转发 交换机收到帧，记录帧的源MAC和输入链路接口 利用目的MAC检索交换表 如果有匹配的目的MAC 如果目的主机位于收到帧的网段，丢弃帧（没必要通过交换机） 否则将帧转发到该入口指向的接口 如果没有匹配MAC，泛洪，自学习。 交换机vs路由器： 两者均为存储-转发设备 路由器：网络层设备（检测网络层分组首部） 交换机：链路层设备（检测链路层帧的首部） 两者均使用转发表 路由器：利用路由算法设置，根据IP 利用自学习、泛洪构建，依据MAC地址 虚拟局域网VLAN 支持VLAN划分的交换机，可以在一个物理LAN架构上配置、定义多个VLAN。 基于端口的VLAN：通过交换机管理软件，管理分组交换机的端口。 流量隔离： 来自/去往1-8的帧只到达端口1-8（也可以基于MAC地址定义VLAN，而不是交换端口） 动态成员： 端口可以动态分配给不同VLAN 在VLAN之间转发：通过路由（就像在独立的交换机之间） 跨越多交换机的VALN 多缆线连接（每个缆线连接一个VLAN） 中继端口：在跨越多个物理交换机定义的VALN承载帧 802.1q协议为经过中继端口转发的帧增加/去除额外的首部域。 为多VLAN转发802.1帧容易产生歧义（必须携带VALN ID） 802.1Q VLAN格式 比普通的以太网帧增加2字节的标记协议ID（固定值0x8100） 2字节的标记控制信息（12bit的VLAN ID；3bit的优先级字段） PPP协议 点对点数据链路控制 一个发送端，一个接受端，一条链路；比广播链路容易 无需介质访问控制 无需明确的MAC地址 拨号链路、ISDN链路 常见的点对点数据链路控制协议： HDLC：High Level Data Link Control PPP：point-to-point portocol PPP的需求 组帧、比特透明传输、差错检测、连接活性检测（检测、并向网络层通知链路失效）、网络层地址协商（端节点可以学习/配置彼此网络地址）。 无需支持：差错纠正、流量控制、支持多点链路、无乱序交付 PPP数据帧 标志（1B）(前后都有，用于定界)、地址（无效）（1B）、控制（无效）（1B）、协议（上层协议，如IP）（1or2 B）、信息（上层协议分组数据）（变长）、校验（CRC）（2or4 B） 字节填充 核心问题：字串01111110是应该作为数据接收还是作为标志处理 发送端：在数据中的01111110和01111101字节前添加额外的字节01111101 接收端：单个字节01111101表示一个填充字节；连续接收两个字节01111101，丢弃第一个，第二个作为数据接收；单个字节01111110为标志字节 PPP数据控制协议 在交换网络层数据之前，PPP数据链路两端必须 配置PPP链路：最大帧长、身份认证 学习/配置网络层信息：对于IP协议：通过交换IPCP协议报文完成IP地址配置（IP分组首部的上层协议字段取值：8021）6.7 回顾：Web页面请求的历程 四个主要层次的总结：婴童层、传输层、网络层、链路层 场景：向www.google.com发送请求，并接收信息 正在连接的笔记本需要获得IP地址、网关、DNS服务器等信息 DHCP（网络层协议）请求依次进行UDP封装、IP封装、802.3以太网帧封装 以太网向局域网发送广播（广播地址），由运行的DHCP服务器的网关路由器收到 以太网帧解封装、IP解封装、UDP解封装、得到DHCP请求 DHCP服务器生成DHCP ACK报文，该报文包含客户端IP、掩码、网关、DNS服务器 DHCP服务器进行封装，将数据帧通过局域网转发（交换机自学习），在客户端进行解封装。 DHCP客户收到了DHCP的ACK应答 到目前为止，客户端有了IP地址，知道了自己的名字以及DNS服务器、网关 在发送HTTP请求之前，需要知道www.google.com的IP地址：DNS 创建DNS请求，进行UDP封装，IP封装，以太帧封装、发送送到网关路由器，需要知道路由器的接口MAC地址：ARP（已知IP求MAC） 广播发送ARP请求，路由器收到以后，发送ARP应答，给出路由器接口的MAC地址 客户端知道了网关路由器的MAC地址，就可以发送包含DNS请求的数据帧了 得到了网关路由器的MAC地址之后，包含DNS查询的IP数据报通过局域网交换机转发到网关路由器 校园网的IP数据报转发到comcast网络的DNS服务器（路由表由RIP、OSPF、或者BGP协议生成） 多路分解到DNS服务器 DNS服务器向客户端发送包含www.google.com的IP的DNS应答 获得了目的的IP地址之后，建立TCP连接 为了发送HTTP请求，客户端首先要创建到web服务器的TCP套接字 TCP的SYN报文域间路由到web服务器（第一次握手） web服务器回应TCP的SYNACK报文（第二次握手） 客户发送ACK进行确认（第三次握手） TCP建立成功 HTTP请求/响应 HTTP请求发送到TCP的套接字 包含HTTP请求的IP数据报路由转发到www.google.com 网络服务器进行HTTP响应（包含web网页） 包含HTTP响应的IP数据报被路由转发到客户端第7章 无线网络和移动网络7.1 概述 元素：无线主机、无线链路（连接无限主机和基站）、基站 基础设施模式：固定基础设施、自组网络 切换：移动主机的移动-&gt;改变与之关联的基站 关联：无线主机位于某个基站的无线通信覆盖范围内、该主机使用该基站中继它与更大网络兼的数据 基础设施模式、自主网(ad hoc)模式 Ad hoc：无基站、节点仅能够在其覆盖范围内向其他节点传送��据、节点之间相互通信组成临时网络，内部选路地址分配 噪声差错 SNR——信噪比 BER——比特差错率 见PPT 13 给定调制方案（带宽），SNR越大，BER越小 给定SNR，较高比特传输率（带宽）的BER越大 码分多址访问CDMA：见1.4节 7.2 无线链路和网络特征以及802.11无线LAN 基站=访问点AP 基本服务集BBS，也称单元。 基础设施网络模式=无线主机+AP（BBS之间通过集线器、交换机、路由器进行连接） 自主网模式（ad hoc）=主机 AP： 802.11b在2.4-2.485g被划分成11个不同频率的信道 每一个AP选择一个信道 存在干扰的可能（相邻的AP选择相同的信道） 主机：必须与每一个AP关联 扫描信道，监听包含AP名称（SSID）和MAC地址的信标帧 选择一个AP进行关联 可能要进行身份验证 典型情景：DHCP获取IP地址 扫描方式 被动扫描（AP主动提供）：AP发送信标帧、主机发送关联请求帧、AP向主机提供关联响应帧 主动扫描（主机自己广播）：主机广播探测请求帧、AP发送探测响应帧、主机选择一个AP发送关联请求帧、AP向主机发送关联响应帧 多路访问控制：避免2+节点的同时冲突 802.11:CSMA——发送数据前监听信道（避免与正在进行传输的其他节点发生冲突） 802.11:不能像CSMA/CD那样，边发送边检测冲突 无限信道很难实现 无法侦听到所有可能冲突：PPT上的两个例子（隐藏站、信号衰落） 目标：避免冲突（collision avoidance）——CSMA/CA CSMA/CA DIFS时间：如果监听信道空闲了DIFS时间，则发送整个帧，同时检测无冲突CD SIFS时间：如果接收方正确接收了帧，延迟SIFS时间之后，向发送端发送ACK 如果监听到了信道忙，开始退避计时。信道空闲的时候，计时器倒计时，计时器超时的时候，发送帧。如果没有收到ACK，增加随机退避间隔时间，重复这一步。 协议的内容 基本思想：允许发送端”预约“信道，而不是随机发送数据帧，从而边面长数据帧传输的冲突（利用很小的预约帧，避免大的冲突） sender利用CSMA向基站发送一个很短的RTS(request to send) BS广播一个CTS(clear to send)帧作为对RTS的响应 CTS帧可以被所有节点接收：消除了隐藏站的影响，发送端可以发送数据帧、其他节点推迟发送 注意到，发送ACK的时候，也会向所有节点发送ACK，告诉其他节点现在可以发送了，推迟发送时间恰好是CTS到ACK的时间 802.11 MAC帧格式 地址1:无限主机或AP接收该帧的MAC地址 地址2:无限主机或者AP发送该帧的MAC地址 地址3:与AP连接的路由器接口的MAC地址 地址4:仅仅在ad hoc模式中使用 去往AP：三个地址依次是：AP、H1、R1 来自AP：三个地址依次是：H1、AP、R1 记忆：地址1、地址2:H1和AP，接收和发送；地址3:R1 802.11均使用CDMA/CA多路访问控制协议、均有基础设施（基站）访问模式和特定网（自主网）网络模式 802.11b： 2.4g-2.5g免费频段，最高速率11mbps（所有主机使用相同的码片序列）（便宜、数据率低、信号最远、不易受阻） 802.11a：5-6g频段，最高速率54mbps（受阻，较短、贵） 802.11g：2.4-2.5g频段，最高速率54mbps（信号传播远、不易受阻，比11b贵） 802.11n：多天线（MIMO）：2.4-2.5g频段，最高速率600mbps（多个发射和接收天线更高数据率传输，双倍带宽时速率可达600Mbps） 同一子网内的移动性、速率自适应、功率管理、无线个人区域网 主机AP1-&gt;AP2但是没有移出AP1。链路层——自学习：交换机记录下来自H1的帧以及交换端口 速率自适应：终端远离基站——SNR减小，BER增大；BER增大到一定程度时候，速率切换较低，保证较低的BER 功率管理： AP缓存所有需要发送给节点的帧，节点在下一个信标帧前被唤醒。 信标帧：包含帧被缓存在AP中的节点的列表 如果有帧，待发节点会保持活动状态，请求这些帧，再转入睡眠状态 如果没有帧，重新进入睡眠到下一个信标帧前 802.15——无线个人区域网 半径小于10m 是自组网、无固定基础设施 主/从式——”从设备“请求允许向“主设备”发送；主设备统一请求 802.15:从蓝牙技术规范演变而来：2.4g-2.5g无线电波段 OSI（功能、协议）、时延 不考 拥塞reno（审题）、流量控制gbn。 选址编址、组网、路由转发、OSPF CRC 链路基本特征概念、基本协议、CRC","categories":[{"name":"CS Courses","slug":"CS-Courses","permalink":"www.waylonding.cn/blog/categories/CS-Courses/"}],"tags":[{"name":"System & Network","slug":"System-Network","permalink":"www.waylonding.cn/blog/tags/System-Network/"},{"name":"Computer Network","slug":"Computer-Network","permalink":"www.waylonding.cn/blog/tags/Computer-Network/"}],"keywords":[{"name":"CS Courses","slug":"CS-Courses","permalink":"www.waylonding.cn/blog/categories/CS-Courses/"}]},{"title":"QT creator的使用与TCP传输试验","slug":"QT creator的使用与TCP传输试验","date":"2019-11-18T12:52:39.000Z","updated":"2019-11-19T11:33:18.532Z","comments":true,"path":"2019/11/18/QT creator的使用与TCP传输试验/","link":"","permalink":"www.waylonding.cn/blog/2019/11/18/QT%20creator%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%8ETCP%E4%BC%A0%E8%BE%93%E8%AF%95%E9%AA%8C/","excerpt":"","text":"使用QT creater实现图形化界面1 QT creater的安装 安装的时候注意一点即可，QT5.9之后的安装包不再分VS版本和WINGW版本，而是都整合到了一个安装包中，请根据需要下载 下载地址可以参考：QT的安装 安装过程可以参考以下博客：https://blog.csdn.net/qq_23473839/article/details/80523318 2 用QT实现C++图形界面2.1 生成简单的窗口并输出文字 关于在qt图形化界面上生成文字（英文），可参照以下博客：https://blog.csdn.net/larger5/article/details/78587076 要注意一点，你的文件路径不能出现中文，不然会报错，就像这样：Error while building/deploying project qt (kit: Desktop Qt 5.11.0 MinGW 32bit) When executing step &quot;qmake&quot; 关于解决中文路径的方法，推荐以下博客：https://blog.csdn.net/m0_37906001/article/details/76672634 建议还是尽量全部使用用英文路径，以免以后遇到不必要的麻烦。2.2 UI探索","categories":[{"name":"计算机网络","slug":"计算机网络","permalink":"www.waylonding.cn/blog/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}],"tags":[{"name":"计算机网络","slug":"计算机网络","permalink":"www.waylonding.cn/blog/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}],"keywords":[{"name":"计算机网络","slug":"计算机网络","permalink":"www.waylonding.cn/blog/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}]},{"title":"Build My Personal Blog with Github and Hexo","slug":"hexo博客安装与利用hexo写文章","date":"2019-11-18T12:52:39.000Z","updated":"2019-11-19T11:32:38.761Z","comments":true,"path":"2019/11/18/hexo博客安装与利用hexo写文章/","link":"","permalink":"www.waylonding.cn/blog/2019/11/18/hexo%E5%8D%9A%E5%AE%A2%E5%AE%89%E8%A3%85%E4%B8%8E%E5%88%A9%E7%94%A8hexo%E5%86%99%E6%96%87%E7%AB%A0/","excerpt":"","text":"搭建hexo博客并用hexo写文章文中对所有的参考博客都给出了链接，感谢这些博客给予的帮助。 1 利用github和hexo搭建博客1.1 搭建步骤概述 本地安装（命令行安装）git、nodejs、hexo。创建本地blog文件夹，执行hexo init。 注册github账号（如果没有注册）、github创建新项目，用于保存你的hexo博客。（若还没在本地配置账号信息和ssh，也需要创建） 在本地文件夹，修改_config.yml的一些配置，首先要指向你的github仓库，然后生成博客。可以利用.io域名访问 如果要绑定个人域名，添加一条DNS记录即可。 然后可以配置主题，主题官网在hexo主题配置 可以修改和安装一些设置 1.2 可供参考的安装和配置hexo的博文 https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html https://www.cnblogs.com/visugar/p/6821777.html 2 把hexo博客搭载到域名子目录 主要参考的是以下的博客：https://www.jianshu.com/p/18356b0a7494直接看：三、操作步骤 修改即可（前提是你上一步的搭建过程该有的配置已经完成） 3 用hexo编写和发布文章3.1 markdown文件的书写hexo主要是用markdown进行书写，下面归纳整理了一些markdown书写过程中的一些常用功能的查找手册以及问题的解决方法： 关于markdown的整体格式和页面书写书写可以参考以下教程：markdown教程 markdown公式大全参考：https://www.jianshu.com/p/25f0139637b7 为md文件生成toc目录，这里我们以在VScode上编写markdown文本为例：https://www.jianshu.com/p/4721ddd27027 VScode自动生成目录时有可能遇到换行不对的问题，参考以下网址解决即可：https://jingyan.baidu.com/article/6b97984df62b501ca3b0bf7a.html 本地md生成了toc目录之后，传到github上之后，该md文件也能正常显示目录，不用再下载任何插件。（由于网上有些人说github上面不支持toc目录，这里澄清一下，并不用额外安装插件，只用在本地安装toc支持并能正常显示目录，在github上面也能正常显示） hexo支持toc自动生成目录，可以参考以下博文配置：https://www.jianshu.com/p/87a885fef1a6 3.2 关于用hexo发布博客 文章发布见如下步骤： 在主目录下，输入hexo new post &quot;文章名&quot;或者hexo new “文章名”,都会在source/_posts/中多出一个.md文件（命令行也会提示你这里多出来一个.md文件），编写这个md文件即可。 打开这个md文件，你会看到要你填写title、date、tags。其中title和date已经自动生成好了(你也可以改)，你只需要填写tag（标签）即可。当然你可也以自己添加其他属性，比如comment（是否可以评论）、toc（是否显示文章目录）、categories（文章分类）。给出一个完整的文章接本设置的代码如下： 12345678910---title: 你的文章的titledate: yy-mm-dd hh:mm:sscomments: true #是否可评论toc: true #是否显示文章目录categories: gexo博客搭建 #分类tags: #标签 - tag1 - tag2--- 编写好文件之后，用hexo clean；hexo g；hexo d 这三条命令，将你所编写的文件放到你的博客上 4 hexo的个性化布局4.1 hexo的页面设置 hexo有几个官方的页面，但是需要自己生成：标签、分类、归档和关于，下面简单介绍一下： 标签页面，创建方式hexo new page tags，然后再在主题配置文件_config.yml中添加：12menu: tags: /tags 在文章中添加tags的方法就是：123456---title: 你的文章的titletags: #标签 - tag1 - tag2--- 添加分类页面；创建方式hexo new page categories，然后在主题配置文件中添加：12menu: categories: /categories 在文章中添加分类的方法为：123456---title: 你的文章的titlecategories: #分类 - hexo - skills--- 同理，根据以上的步骤，还可以添加主页面home、归档archives、关于about。主题配置文件_config.yml中添加如下：123456menu: home: / //主页 categories: /categories //分类 archives: /archives //归档 tags: /tags //标签 about: /about //关于 我们也可以自己定义一个页面，比如myself页面，创建方式还是hexo new page myself,在主题配置文件_config.yml中添加如下（这里显示我们所有的页面配置）： 123456menu: home: / //主页 categories: /categories //分类 archives: /archives //归档 tags: /tags //标签 about: /about //关于","categories":[{"name":"hexo搭建属于自己的博客","slug":"hexo搭建属于自己的博客","permalink":"www.waylonding.cn/blog/categories/hexo%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/"},{"name":"hexo技术","slug":"hexo搭建属于自己的博客/hexo技术","permalink":"www.waylonding.cn/blog/categories/hexo%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/hexo%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"hexo相关技术","slug":"hexo相关技术","permalink":"www.waylonding.cn/blog/tags/hexo%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF/"},{"name":"markdown的使用","slug":"markdown的使用","permalink":"www.waylonding.cn/blog/tags/markdown%E7%9A%84%E4%BD%BF%E7%94%A8/"}],"keywords":[{"name":"hexo搭建属于自己的博客","slug":"hexo搭建属于自己的博客","permalink":"www.waylonding.cn/blog/categories/hexo%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/"},{"name":"hexo技术","slug":"hexo搭建属于自己的博客/hexo技术","permalink":"www.waylonding.cn/blog/categories/hexo%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/hexo%E6%8A%80%E6%9C%AF/"}]}]}