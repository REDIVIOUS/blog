{"meta":{"title":"REDIVIOUS‘s Blog","subtitle":"世界那么大，我想去看看","description":"Waylon Ding's blog.","author":"Waylon Ding","url":"www.waylonding.cn/blog"},"pages":[{"title":"about","date":"2019-11-19T06:48:40.000Z","updated":"2019-11-19T06:48:40.233Z","comments":true,"path":"about/index.html","permalink":"www.waylonding.cn/blog/about/index.html","excerpt":"","text":""}],"posts":[{"title":"Computing Theory Notes","slug":"Computing-Theory","date":"2019-11-20T06:49:38.000Z","updated":"2019-11-25T11:06:24.401Z","comments":true,"path":"2019/11/20/Computing-Theory/","link":"","permalink":"www.waylonding.cn/blog/2019/11/20/Computing-Theory/","excerpt":"","text":"Notes of Computing Theory 2019Reference: Introduction to the Theory of Computation (3rd edition) An Introduction to Formal Languages and Automata (5th thedition) Computational Complexity: a Modern Approach Part1 Formal Language and Automata1.1 Basis1.1.1 Introduction1.1.2 Languages1.1.3 DFA1.1.4 NFA1.2 Regular_Expression1.2.1 Regular_Expressions1.2.2 Regular_Properties1.2.3 Regular_Grammars1.2.4 Regular_Pumping1.2.5 Regular_Pumping_Examples1.3 Context_Free1.3.1 Context-Free Languages 主要形式：S-&gt;ab|SS|e 推导表：对于一个语法，和确定的答案，可以每次替换最左的变量、或者每次替换最右的变量 推导树（解析树）：对于每一个推导都能给出一个derivation tree。 歧义性：leftmost和rightmost推导出来的结果不一样（有两个不同的derivation tree或者有两个不同的左文法）例如E-&gt;E+E|EE|(E)|a对于a+aa，有两个不同路径的派生 要将歧义的转换为非歧义的，或许能够成功，但也有失败的。 有的语言是固有的歧义的。（PPT在此时隐含告诉了你如何用language构造grammar） 注意PPT上举出的例子：{a^n b^n c^n}不是一个context-free的语言1.3.2 Properties of Context-Free languages context-free的关键点是：language-L、grammars-G、variables-S union操作：s-&gt;s1|s2 concatention操作：s-&gt;s1s2 star operation操作：s1-&gt;ss1|r intersection、complement不一定是context-free 1.3.3 Simplifications of Context-Free Grammars1.3.4 Context_Free_Pumping1.3.5 Context_Free_Pumping_Examples1.4 PDA1.4.1 PDA a, b-&gt;c (input, pop, push) NPDA: 有不确定状态的下推自动机：如e状态如果一个string被接受了，代表所有的输入被消耗了，最后一个状态是接受状态。 push &amp; pop strings：a, w1-&gt;w2 (inout,pop strings push strings) (注意，在构造PDA的时候，需要知道pop和push中间需要加上一个介稳态) instantaneous descripition：(q,u,s):(现有状态，剩余输入、现有在栈中的输入) 我们有：前一个时间的instantaneous descripition &gt; 后一个时间的instantaneous descripition。1.4.2 PDA_Accept_Context_Free 一个context-free language 和一个能被PDA接受的语言是等价的。证明过程：1.证明conetxt-free语言的语法被PDA的语法包含。（能将context-free文法转换为PDA；2.证明context-free语言（文法）包含PDA（能将任意的PDA转换为context-free文法） context-free转换为PDA q0-&gt;q1-&gt;q2 (q1:loop) grammar：A-&gt;w: e,A-&gt;w terminal：a,a-&gt;e PDA -&gt; context-free 转换到：PDA只有一个接受状态，利用e，e-&gt;e 使用initial stack symbol#增加e,e-&gt;@; e,e-&gt;Z；对于PDA来说，还是z为初始状态 使用唯一的接受stack symbol#增加e,e-&gt;e; 1.4.3 DPDA 确定性的下推自动机。不允许不确定性的情况存在。例如同时存在a,b-&gt;w1和a,b-&gt;w2。也不允许r,b-&gt;w1和a,b-&gt;w2同时存在。 如果有一个DPDA构造的语言L，证明这个语言是确定性上下文法无关语言。 DPFA属于PFA的一部分（真包含关系）。PPT中展示了一个context-free language它不能被任何DPDA接受：L(M)={a^n b^n}+{a^n b^2n} ：构造一条路径，构造一个PDA有形式L+{a^n b^n c^n}。而这个形式本来不属于context-free语言，推出矛盾。part2","categories":[{"name":"CS Courses","slug":"CS-Courses","permalink":"www.waylonding.cn/blog/categories/CS-Courses/"}],"tags":[{"name":"Formal language and Automata","slug":"Formal-language-and-Automata","permalink":"www.waylonding.cn/blog/tags/Formal-language-and-Automata/"}],"keywords":[{"name":"CS Courses","slug":"CS-Courses","permalink":"www.waylonding.cn/blog/categories/CS-Courses/"}]},{"title":"OpeartingSystem Notes","slug":"OpeartingSystem-Notes","date":"2019-11-19T08:29:13.000Z","updated":"2019-11-25T11:06:27.633Z","comments":true,"path":"2019/11/19/OpeartingSystem-Notes/","link":"","permalink":"www.waylonding.cn/blog/2019/11/19/OpeartingSystem-Notes/","excerpt":"","text":"计算机操作系统学习&amp;复习笔记参考书目：计算机操作系统（人民邮电出版社） 第一章 绪论1.1 操作系统在计算机中的地位 * 操作系统是什么； 是核心软件 负责软件硬件资源分配与调用 控制、协调并发活动 提供用户接口、为用户良好工作环境 操作系统特点位置：从里到往外裸机-&gt;操作系统-&gt;应用软件 内容庞杂、涉及面广 控制管理硬件、软件；控制程序进行 为用户提供良好接口 实践性强 技术发展快Unix和linux采取优先调度。linux调度方法：140队列，140位位图，扫描位图（不怎么需要时间），高优先级入列 OS和各层次的关系 硬件：控制CPU、访问存储、驱动设备、中断 软件：控制管理、提供界面和服务 各层次对OS的影响 硬件约束：用串行（CPU）实现并行（操作系统） 上层用户需求：实时和分时，界面友好 1.5 操作系统采用的技术 * 并行处理技术 并行处理：多个部件、为整体任务同时执行。 多用户、多任务同时执行。为描述任务，引入进程的概念。进程的状态及控制（任务状态）、进程同步与互斥（多任务协调）、进程调度（CPU控制权的分配等等） 系统资源共享处理机共享（处理机分配调度）、存储器共享（存储分配、保护、虚拟存储与地址映射）、设备共享（设备分配驱动以及中断）、信息共享（文件结构、共享以及存取方法） 虚拟技术 用户：逻辑视图。操作系统：物理视图。 物理（硬件）资源（系统）：CPU、主存、打印机、磁盘等。 逻辑（软件）资源（用户）：CPU1、CPU2（CPU分时）；虚拟主存1、虚拟主存2（主存的主存管理）；打印机1、打印机2（虚拟打印技术）（网络上有很多资源需要打印机） 第二章 操作系统的结构和硬件支持2.3 处理机的态 * 系统中两类程序：管理程序和用户程序： 管理程序：管理系统资源、控制程序运行 用户程序: 使用资源、提出申请；被控制 区分处理机状态的目的是为了保护操作系统。不保护就有可能瘫痪。 处理机的态：中央处理机的工作状态（取决于当前处理机运行的程序） 管态：管理程序执行的态。称特权级。使用全部指令和资源。 有的细分为核心态和管态 用户态：用户程序执行的态。只允许访问自己的存储区域，禁止特权指令，不能直接取用资源与改变机器的态。 管态和用户态区别： 管态 操作系统程序执行 使用全部指令 使用全部系统资源（包括整个存储空间） 用户态 用户程序执行 禁用特权指令 只允许用户程序访问自己的存储区域 特权指令集 涉及到外部设备的输入/输出命令 修改特殊寄存器的指令 改变机器状态的指令 实现处理机分态的硬件支持 在状态寄存器中设置状态位： 一位：用户态、管态 两位：核态、管态、用户态 核态和管态都是操作系统程序执行时处理机的状态。核态：操作系统核心程序执行时的状态，权限比管态高，可以执行所有机器指令（改变机器状态）。 Unix（linux）系统中状态的分类 00-核态；01-管态；11-用户态 80x86微处理器中状态位：（CPU特权级）DPL=0（核态）；DPL=3（用户态） 程序性中断 程序有越权操作时候发生的中断称为程序性中断。 中断机制负责使其陷入操作系统，用户态转换为管态，操作系统管理程序获得控制权开始执行。 什么时候中断用户态下超出了权限时保护操作系统： 当用户执行了一条特权指令 当用户程序试图访问操作系统数据区或其他程序占用的区域时。2.4 中断及其处理 * 中断：某个事件（掉电、定点加法溢出，I/O结束）发生时，停止现行程序执行，转而处理该事件的程序对事件进行处理，处理完毕返回执行原来程序。 中断类型： I/O中断 外中断：时钟、操作员控制台中断、通信中断 机器故障中断：电源、主存取指错等。 程序性中断：定点溢出、用户态下使用核态指令、非法操作 访管中断：对操作系统提出某种需求的时所发出的中断。 中断方式： 强迫性中断：除了访管中断 自愿中断：访管中断 中断来源 中断：由处理机外部事件引起的中断：时钟、磁盘、终端 俘获：由处理机内部事件引起的中断：非法指令、地址越界、浮点溢出、trap指令 中断响应及硬件支持： 保护现场、恢复现场 现场： 后继指令所在主存的单元号、程序运行所处的状态、指令执行情况、程序执行的中间结果 保护现场：现场存入主存。 恢复现场：把保护的现场重新送到各个特殊寄存器 中断响应：中央处理器发出请求-&gt;中止现有程序执行-&gt;引出中断处理程序的过程 系统堆栈：存入指令计数器(PC)、处理机状态寄存器(PS) 的内容 (一般先PS后PC？)（硬件层面） 中断向量表：存入中断程序地址（地址内存从0开始） 中断响应实质：交换指令地址及处理机的状态信息 软件的中断处理过程 中断进入 step1 保护中断程序的现场（没有保存的寄存器） step2 进入相应的中断服务例程。 step3 恢复中断程序的现场。 第三章 操作系统的用户接口3.2 操作系统的用户接口及分类 用户接口/用户界面：用户控制计算机的手段 操作接口/命令界面：键盘命令（分时操作系统）（MS-DOS、unix/linux）、图形界面（windows）、作业控制语言（批处理系统）组织工作流程，控制程序运行（C语言编写编译链接等） 程序接口：系统功能调用程序运行时，使用系统功能调用来请求操作系统的服务。3.3 系统功能调用及其实现技术 硬件支持：由用户态到管态 访管指令/自愿进管指令：svc n（功能号） 访管中断：正在运行的程序对于操作系统的某种需求。 系统功能调用：借助访管指令，取值n（特定功能），硬件进入，软件方法完成。 系统调用实现用户程序（svc i）、访管中断处理程序（按照i转移）、例行子程序入口地址表、例行自程序3.5 linux系统调用功能的实现 linux系统功能调用的进入 异常处理（系统调用通过异常类型实现）、软中断（int 0x80）、状态转换（从用户态到核心态，执行自陷处理程序（防管中断处理程序）） getuid系统调用过程 用户程序(getuid())-&gt;标准C库(内含int0x80)-&gt;系统调用处理程序-&gt;内核例程（系统服务例程） linux系统调用的进入和返回 软中断（自陷指令/访管指令）int 0x80 发生中断（自陷/访管中断） 处理机用户态-&gt;内核态（内核状态的改变） system_call()开始执行系统调用处理程序（系统功能调用的执行） 处理完毕后，iret返回到用户态 Linux系统功能调用的实现机制 硬件支持： 增加一个软中断指令、自陷 软件：系统调用号、系统调用表、系统服务例程、系统调用处理程序 增加一个新的系统调用 增加一个新的系统服务例程 增加一个新的系统调用号 在系统调用表中增加一项（新例程的地址） 将新的系统服务例程加入到系统中（系统重构） 系统调用号 linux中每个系统调用被赋予一个唯一的系统调用号格式：#define _NR_fork 2 系统调用表：记录了内核中所有已经注册过的系统调用、系统调用的函数指针（函数指针数组）（保存所有系统调用的函数指针） 系统调用的处理过程 宏SAVE_ALL保护现场 正确性检查 eax中包含系统调用号，调用对应的服务例程 服务流程结束时，RESTORE_ALL恢复寄存器 iret返回 第四章 进程及进程管理4.1 并发进程及其特点 程序的顺序执行：一个程序的一次执行过程称为一个计算，一个计算的若干操作必须按照严格的先后顺序来执行。 顺序性：按照严格顺序执行 封闭性：一旦开始执行，不受外界因素影响 可再现性：执行的结果与他的执行速度无关（时间无关），与初始条件有关。 并发程序 定义：若干个程序同时在系统中运行，程序在时间上时重叠的（一个没做完，另外一个已经开始） 并行语句记号cobegin S1，S2，S3…coend 并发程序的特点 失去了封闭性和可再现性一个程序的执行可以改变另一个程序的变量，后者的输出依赖于各程序执行的相对速度，失去了程序的封闭性的特点。 解决进程的同步问题（与时间有关的错误） 程序与计算不再一一对应：一个程序对应多个计算 程序并发执行的相互制约：间接的相互制约：资源共享、直接的相互制约：公共变量 4.2.1 进程定义 运行（获得cpu）-&gt;暂停（保留状态）-&gt;运行（获得cpu） 定义：在给定的活动空间和初始环境下，在一个处理机上的执行过程。 与程序的区别 程序静态（C语言代码不变）、进程动态（一次执行过程） 进程是一个独立运行的活动单位 竞争系统资源的基本单位（cpu，I/O） 一个程序可以对应多个进程，一个进程至少包含一个程序。4.2.2 进程状态及其变迁 进程的基本状态 运行状态（占用cpu）：已经获得运行所必须的资源，程序正在处理机上执行 （单cpu运行状态只能有一个） 等待状态（输入输出）：程序等待某一事件等待发生（等待外部传输完成等等）而暂时停止执行（这时即使给它cpu的控制权也无法执行） 就绪状态：进程已经获得除了CPU之外的运行所必须的资源，一旦获得了CPU控制权，就可以立即运行。 进程状态的变迁：（基本状态变迁只有前三个） 运行-&gt;等待：服务请求（I/O） 等待-&gt;就绪：（I/O是完成）服务完成，事件来到 就绪-&gt;运行：进程调度（CPU空出） 等待-&gt;运行：不可能 运行-&gt;就绪：时间片到了（分时系统中） 就绪-&gt;等待：有需求的系统提供（一般没有） linux系统状态变迁 新进程-&gt;就绪：创建 就绪-&gt;运行：进程调度 运行-&gt;就绪：被抢占 等待-&gt;就绪：等待的事情发生 运行-&gt;等待：等待某事件 运行-&gt;终止：进程完成 进程状态变迁的驱动及条件见作业习题4.2.3 进程控制块及进程队列 4.3 进程控制4.4.2 进程互斥的概念","categories":[{"name":"CS Courses","slug":"CS-Courses","permalink":"www.waylonding.cn/blog/categories/CS-Courses/"}],"tags":[{"name":"Operating System","slug":"Operating-System","permalink":"www.waylonding.cn/blog/tags/Operating-System/"},{"name":"System & Network","slug":"System-Network","permalink":"www.waylonding.cn/blog/tags/System-Network/"}],"keywords":[{"name":"CS Courses","slug":"CS-Courses","permalink":"www.waylonding.cn/blog/categories/CS-Courses/"}]},{"title":"ComputerNetwork Notes","slug":"ComputerNetwork-Review-Notes","date":"2019-11-19T08:13:01.000Z","updated":"2019-11-19T11:09:22.234Z","comments":true,"path":"2019/11/19/ComputerNetwork-Review-Notes/","link":"","permalink":"www.waylonding.cn/blog/2019/11/19/ComputerNetwork-Review-Notes/","excerpt":"","text":"计算机网络-自顶向下 学习笔记 &amp; 计算机通信与网络课程复习参考书目：计算机网络-自顶向下方法（原书第7版） 第1章 计算机网络和因特网1.1 什么是因特网1.2 网络边缘1.4 分组交换网中的时延、丢包和吞吐量1.5 协议层次及服务模型第2章 应用层2.1 应用层协议原理2.2 Web和HTTP2.3 因特网中的电子邮件2.4 DNS：因特网的目录服务2.5 P2P文件分发第3章 运输层3.1 概述和运输层服务3.2 多路复用与多路分解3.3 无连接运输：UDP3.4 可靠数据传输原理3.5 面向连接的运输：TCP3.6 拥塞控制原理3.7 TCP拥塞控制第4章 网络层：数据平面4.1 网络层概述4.2 路由器工作原理4.3 网际协议：IPv4、寻址、IPv6及其他第5章 网络层：控制平面5.1 概述5.2 路由选择算法5.3 因特网中自治系统内部的路由选择：OSPF5.4 ISP之间的路由选择：BGP5.6 ICMP：因特网控制报文协议第6章 链路层和局域网6.1 链路层概述6.2 差错检测和纠正技术6.3 多路访问链路协议6.4 交换局域网6.7 回顾：Web页面请求的历程第7章 无线网络和移动网络7.1 概述7.2 无线链路和网络特征7.3 WiFi：802.11无线LAN","categories":[{"name":"CS Courses","slug":"CS-Courses","permalink":"www.waylonding.cn/blog/categories/CS-Courses/"}],"tags":[{"name":"System & Network","slug":"System-Network","permalink":"www.waylonding.cn/blog/tags/System-Network/"},{"name":"Computer Network","slug":"Computer-Network","permalink":"www.waylonding.cn/blog/tags/Computer-Network/"}],"keywords":[{"name":"CS Courses","slug":"CS-Courses","permalink":"www.waylonding.cn/blog/categories/CS-Courses/"}]},{"title":"QT creator的使用与TCP传输试验","slug":"QT creator的使用与TCP传输试验","date":"2019-11-18T12:52:39.000Z","updated":"2019-11-19T11:33:18.532Z","comments":true,"path":"2019/11/18/QT creator的使用与TCP传输试验/","link":"","permalink":"www.waylonding.cn/blog/2019/11/18/QT%20creator%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%8ETCP%E4%BC%A0%E8%BE%93%E8%AF%95%E9%AA%8C/","excerpt":"","text":"使用QT creater实现图形化界面1 QT creater的安装 安装的时候注意一点即可，QT5.9之后的安装包不再分VS版本和WINGW版本，而是都整合到了一个安装包中，请根据需要下载 下载地址可以参考：QT的安装 安装过程可以参考以下博客：https://blog.csdn.net/qq_23473839/article/details/80523318 2 用QT实现C++图形界面2.1 生成简单的窗口并输出文字 关于在qt图形化界面上生成文字（英文），可参照以下博客：https://blog.csdn.net/larger5/article/details/78587076 要注意一点，你的文件路径不能出现中文，不然会报错，就像这样：Error while building/deploying project qt (kit: Desktop Qt 5.11.0 MinGW 32bit) When executing step &quot;qmake&quot; 关于解决中文路径的方法，推荐以下博客：https://blog.csdn.net/m0_37906001/article/details/76672634 建议还是尽量全部使用用英文路径，以免以后遇到不必要的麻烦。2.2 UI探索","categories":[{"name":"计算机网络","slug":"计算机网络","permalink":"www.waylonding.cn/blog/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}],"tags":[{"name":"计算机网络","slug":"计算机网络","permalink":"www.waylonding.cn/blog/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}],"keywords":[{"name":"计算机网络","slug":"计算机网络","permalink":"www.waylonding.cn/blog/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}]},{"title":"Build My Personal Blog with Github and Hexo","slug":"hexo博客安装与利用hexo写文章","date":"2019-11-18T12:52:39.000Z","updated":"2019-11-19T11:32:38.761Z","comments":true,"path":"2019/11/18/hexo博客安装与利用hexo写文章/","link":"","permalink":"www.waylonding.cn/blog/2019/11/18/hexo%E5%8D%9A%E5%AE%A2%E5%AE%89%E8%A3%85%E4%B8%8E%E5%88%A9%E7%94%A8hexo%E5%86%99%E6%96%87%E7%AB%A0/","excerpt":"","text":"搭建hexo博客并用hexo写文章文中对所有的参考博客都给出了链接，感谢这些博客给予的帮助。 1 利用github和hexo搭建博客1.1 搭建步骤概述 本地安装（命令行安装）git、nodejs、hexo。创建本地blog文件夹，执行hexo init。 注册github账号（如果没有注册）、github创建新项目，用于保存你的hexo博客。（若还没在本地配置账号信息和ssh，也需要创建） 在本地文件夹，修改_config.yml的一些配置，首先要指向你的github仓库，然后生成博客。可以利用.io域名访问 如果要绑定个人域名，添加一条DNS记录即可。 然后可以配置主题，主题官网在hexo主题配置 可以修改和安装一些设置 1.2 可供参考的安装和配置hexo的博文 https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html https://www.cnblogs.com/visugar/p/6821777.html 2 把hexo博客搭载到域名子目录 主要参考的是以下的博客：https://www.jianshu.com/p/18356b0a7494直接看：三、操作步骤 修改即可（前提是你上一步的搭建过程该有的配置已经完成） 3 用hexo编写和发布文章3.1 markdown文件的书写hexo主要是用markdown进行书写，下面归纳整理了一些markdown书写过程中的一些常用功能的查找手册以及问题的解决方法： 关于markdown的整体格式和页面书写书写可以参考以下教程：markdown教程 markdown公式大全参考：https://www.jianshu.com/p/25f0139637b7 为md文件生成toc目录，这里我们以在VScode上编写markdown文本为例：https://www.jianshu.com/p/4721ddd27027 VScode自动生成目录时有可能遇到换行不对的问题，参考以下网址解决即可：https://jingyan.baidu.com/article/6b97984df62b501ca3b0bf7a.html 本地md生成了toc目录之后，传到github上之后，该md文件也能正常显示目录，不用再下载任何插件。（由于网上有些人说github上面不支持toc目录，这里澄清一下，并不用额外安装插件，只用在本地安装toc支持并能正常显示目录，在github上面也能正常显示） hexo支持toc自动生成目录，可以参考以下博文配置：https://www.jianshu.com/p/87a885fef1a6 3.2 关于用hexo发布博客 文章发布见如下步骤： 在主目录下，输入hexo new post &quot;文章名&quot;或者hexo new “文章名”,都会在source/_posts/中多出一个.md文件（命令行也会提示你这里多出来一个.md文件），编写这个md文件即可。 打开这个md文件，你会看到要你填写title、date、tags。其中title和date已经自动生成好了(你也可以改)，你只需要填写tag（标签）即可。当然你可也以自己添加其他属性，比如comment（是否可以评论）、toc（是否显示文章目录）、categories（文章分类）。给出一个完整的文章接本设置的代码如下： 12345678910---title: 你的文章的titledate: yy-mm-dd hh:mm:sscomments: true #是否可评论toc: true #是否显示文章目录categories: gexo博客搭建 #分类tags: #标签 - tag1 - tag2--- 编写好文件之后，用hexo clean；hexo g；hexo d 这三条命令，将你所编写的文件放到你的博客上 4 hexo的个性化布局4.1 hexo的页面设置 hexo有几个官方的页面，但是需要自己生成：标签、分类、归档和关于，下面简单介绍一下： 标签页面，创建方式hexo new page tags，然后再在主题配置文件_config.yml中添加：12menu: tags: /tags 在文章中添加tags的方法就是：123456---title: 你的文章的titletags: #标签 - tag1 - tag2--- 添加分类页面；创建方式hexo new page categories，然后在主题配置文件中添加：12menu: categories: /categories 在文章中添加分类的方法为：123456---title: 你的文章的titlecategories: #分类 - hexo - skills--- 同理，根据以上的步骤，还可以添加主页面home、归档archives、关于about。主题配置文件_config.yml中添加如下：123456menu: home: / //主页 categories: /categories //分类 archives: /archives //归档 tags: /tags //标签 about: /about //关于 我们也可以自己定义一个页面，比如myself页面，创建方式还是hexo new page myself,在主题配置文件_config.yml中添加如下（这里显示我们所有的页面配置）： 123456menu: home: / //主页 categories: /categories //分类 archives: /archives //归档 tags: /tags //标签 about: /about //关于","categories":[{"name":"hexo搭建属于自己的博客","slug":"hexo搭建属于自己的博客","permalink":"www.waylonding.cn/blog/categories/hexo%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/"},{"name":"hexo技术","slug":"hexo搭建属于自己的博客/hexo技术","permalink":"www.waylonding.cn/blog/categories/hexo%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/hexo%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"hexo相关技术","slug":"hexo相关技术","permalink":"www.waylonding.cn/blog/tags/hexo%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF/"},{"name":"markdown的使用","slug":"markdown的使用","permalink":"www.waylonding.cn/blog/tags/markdown%E7%9A%84%E4%BD%BF%E7%94%A8/"}],"keywords":[{"name":"hexo搭建属于自己的博客","slug":"hexo搭建属于自己的博客","permalink":"www.waylonding.cn/blog/categories/hexo%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/"},{"name":"hexo技术","slug":"hexo搭建属于自己的博客/hexo技术","permalink":"www.waylonding.cn/blog/categories/hexo%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/hexo%E6%8A%80%E6%9C%AF/"}]}]}